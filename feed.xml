<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coldflake Blog</title>
    <description>Exploring software technologies</description>
    <link>http://blog.coldflake.com/</link>
    <atom:link href="http://blog.coldflake.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 18 Dec 2014 22:33:42 +0100</pubDate>
    <lastBuildDate>Thu, 18 Dec 2014 22:33:42 +0100</lastBuildDate>
    <generator>Jekyll v2.5.1</generator>
    
      <item>
        <title>Testing C++ With A New Catch</title>
        <description>&lt;p&gt;Unit Testing frameworks are mostly boring – if they are any good, they follow the rough approach of
the x-unit family that Kent Beck introduced with smalltalk. And in languages like ruby or even
Java they are quite comfortable and can make use of the runtime introspection capabilities, mostly
to automatically discover your test cases and execute them. Not so in C++. And the test frameworks
here always feel a little clumsy. CppUnit has an arcane way of writing and registering your
testcases. I was a user once, never again. As so often &lt;a href=&quot;http://www.boost.org/&quot;&gt;boost&lt;/a&gt; has a superior solution (&lt;a href=&quot;(http://www.boost.org/doc/libs/1_49_0/libs/test/doc/html/index.html)&quot;&gt;Boost.Test&lt;/a&gt;)
but it’s reeeeeeeally a pain to set it up – so I ended up not using it either.&lt;br /&gt;
A noteworthy exception to the depressing C++ testing landscape is &lt;a href=&quot;/posts/gtest&quot;&gt;gtest&lt;/a&gt;, googles own testing
framework for C++ that aims at portability and ease of use. It heavily relies on macros to provide
kind of a nice syntax and automatic test registration. It’s light weight, extensible and works on
most platforms out-of-the-box. It has become my default turn-to solution for writing C++ unit tests.
Digging into it’s features reveals that it is capable of rather non standard niceties like
repeatedly running the test cases while randomizing the execution order, running a subset of your
tests (using exclude/include patterns on invocation) or turning assertion errors directly into
debugger break-points.&lt;/p&gt;

&lt;h2 id=&quot;enter-the-world-of-catch&quot;&gt;Enter the world of Catch&lt;/h2&gt;

&lt;p&gt;I just found out recently about &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt; while watching someone explain a piece of code along with it’s
tests. The first thing that kind of sticks out is that the tests seem to have a very clear visual
outline. That might seem silly but when looking at a piece of code I really like it when I can
get a feeling for the program structure merely by the outline of the text of the program. And that is
caused by one of the most intriguing aspects of &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt;: rather then to use the classical &lt;code&gt;setup&lt;/code&gt; –
&lt;code&gt;test&lt;/code&gt; – &lt;code&gt;teardown&lt;/code&gt; cycle, the test-cases are organized into nested sections. The inner-most
sections (the &lt;em&gt;leaf&lt;/em&gt;-sections) are the actual units under test, and they are executed along with
their enclosing sections. That immediately allows to reuse setup and tear-down code – on multiple
levels.&lt;br /&gt;
What I found is that my test cases got considerable shorter since a lot of times there is some
common setup steps or even test steps that are actually duplicated in a couple of test cases. The
classic &lt;em&gt;one-setup-approach&lt;/em&gt; is just not enough here. The image shows the outline of the tests
&lt;a href=&quot;https://github.com/marcmo/bitstream/blob/46ae519fe3abbfaa8157464fc57a26b8eeae57b2/test/BitstreamTest.cpp&quot;&gt;before&lt;/a&gt; and &lt;a href=&quot;https://github.com/marcmo/bitstream/blob/b39b301ed15c05a3af81ecc8837ab12c46eead7e/test/BitstreamTest.cpp&quot;&gt;after&lt;/a&gt; porting them from gtest to &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/catch/code_outline.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;quick-setup&quot;&gt;Quick Setup&lt;/h2&gt;

&lt;p&gt;One thing C++ programmers (or at least me) envy in the javascript/&lt;a href=&quot;http://nodejs.org/&quot;&gt;nodejs&lt;/a&gt; community is the uniform
and quick way to start a project and add the dependencies. It’s quite common to check out a project
from github, do a quick &lt;code&gt;npm install&lt;/code&gt; and have all dependencies installed in the local project
directory within seconds.&lt;br /&gt;
&lt;em&gt;Catch&lt;/em&gt; is a header-only library (thanks!!) and getting up to speed is just as fast: &lt;code&gt;wget&lt;/code&gt; the
latest &lt;a href=&quot;https://raw.githubusercontent.com/philsquared/Catch/master/single_include/catch.hpp&quot;&gt;all-in-one-header&lt;/a&gt; file, add 2 lines to your test file, and everything is ready!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;Bitstream.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define CATCH_CONFIG_MAIN&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;catch.hpp&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TEST_CASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;getOneBit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BitstreamReader&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No need to derive from a Test-Base class or anything like that. Pretty much just include the header,
request a predefined &lt;code&gt;main&lt;/code&gt; function, and write your test-case.&lt;/p&gt;

&lt;h2 id=&quot;behavior-driven-anyone&quot;&gt;Behavior Driven anyone?&lt;/h2&gt;

&lt;p&gt;Quite amazingly the &lt;em&gt;section&lt;/em&gt;-based design lets you use a &lt;a href=&quot;http://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt;-flavored syntax without having to
add any implementation. Here is an example of how it can be used:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;SCENARIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BitstreamTest: read bits from stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[getters]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GIVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A Bitstream with 1 byte of data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BitstreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitstreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;we set the leftmost bit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;we should get 1 when reading 1 bit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;REQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Will produce an output something like that:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt;
Scenario: BitstreamTest: read bits from stream
     Given: A Bitstream with 1 byte of data
      When: we set the leftmost bit
      Then: we should get 1 when reading 1 bit
    ...
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SCENARIO&lt;/code&gt; is merely a synonym for &lt;code&gt;TEST_CASE&lt;/code&gt;, &lt;code&gt;GIVEN&lt;/code&gt; and &lt;code&gt;WHEN&lt;/code&gt; are synonyms for &lt;code&gt;SECTION&lt;/code&gt;. So
simple but results in a beautiful DSL.&lt;/p&gt;

&lt;h2 id=&quot;simplicity-all-the-way&quot;&gt;Simplicity all the way&lt;/h2&gt;

&lt;p&gt;In contrast to other Unit-testing frameworks, &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt; does not offer the usual selection of assert
macros but manages to get away with basically just 2 kinds: &lt;code&gt;REQUIRE&lt;/code&gt; and &lt;code&gt;CHECK&lt;/code&gt;.  &lt;code&gt;REQUIRE&lt;/code&gt;
evaluates a boolean expression and stops the tests as soon as there is an assertion failure. &lt;code&gt;CHECK&lt;/code&gt;
does the same thing but keeps the tests going, reporting what went wrong in the end. And the reports
you get are even really specific, not just something like the &lt;em&gt;”…expected True but was False…“&lt;/em&gt;
kind of junk.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt;
...
test/BitstreamTest.cpp:31: FAILED:
  REQUIRE( 0b1 == bs-&amp;gt;get&amp;lt;2&amp;gt;() )
with expansion:
  1 == 3
...
&lt;/pre&gt;

&lt;h2 id=&quot;command-line-tool&quot;&gt;Command line Tool&lt;/h2&gt;

&lt;p&gt;With the executable you get a decent command line parser built in that gives you a lot of
options. Rather then to just execute every test-case, you can select the cases to be executed using
a simple glob-like pattern (e.g. &lt;code&gt;put*&lt;/code&gt; matches tests starting with &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;~put*&lt;/code&gt; everything else).&lt;br /&gt;
Another option I really like is the &lt;code&gt;--list&lt;/code&gt; option, which tells you about all available tests.
Almost a little bit like &lt;code&gt;rake -T&lt;/code&gt; is used to display the available tasks in a rakefile.  &lt;code&gt;--tags&lt;/code&gt;
is similar but shows the available tags instead (test-cases can be tagged with multiple strings
which makes it very convenient to restrict the executed test-cases, e.g. to just run the tests that
deal with insertion etc.).&lt;br /&gt;
By default &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt; is very quiet and does not report on successful test-cases. Sometimes it’s
nice to see them as well so you can use the &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--success&lt;/code&gt; option to do so.&lt;br /&gt;
There are a lot more options to explore, here are the ones of the current version:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; test_executable -h
Catch v1.0 build 53
usage:
  bitstream.exe [&amp;lt;test name, pattern or tags&amp;gt; ...] [options]

where options are:
  -?, -h, --help               display usage information
  -l, --list-tests             list all/matching test cases
  -t, --list-tags              list all/matching tags
  -s, --success                include successful tests in output
  -b, --break                  break into debugger on failure
  -e, --nothrow                skip exception tests
  -i, --invisibles             show invisibles (tabs, newlines)
  -o, --out &amp;lt;filename&amp;gt;         output filename
  -r, --reporter &amp;lt;name&amp;gt;        reporter to use (defaults to console)
  -n, --name &amp;lt;name&amp;gt;            suite name
  -a, --abort                  abort at first failure
  -x, --abortx &amp;lt;no. failures&amp;gt;  abort after x failures
  -w, --warn &amp;lt;warning name&amp;gt;    enable warnings
  -d, --durations &amp;lt;yes/no&amp;gt;     show test durations
  -f, --input-file &amp;lt;filename&amp;gt;  load test names to run from a file
  --list-test-names-only       list all/matching test cases names only
  --list-reporters             list all reporters
&lt;/pre&gt;

&lt;h2 id=&quot;give-it-a-try&quot;&gt;Give it a Try!&lt;/h2&gt;

&lt;p&gt;Catch might not be the test-framework with the most features but it certainly brings a fresh new
approach to the table. It’s trivial to setup and use and that alone should be a reason to use it.
From the limited time I spent playing with it I already found it has given me some nice benefits. I
plan to use it even more in the future.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; Someone made me aware of &lt;a href=&quot;https://github.com/unittest-cpp/unittest-cpp&quot;&gt;UnitTest++&lt;/a&gt;. I had a brief look at it but immediately bailed when
I saw the comment in the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Pre-requisites: While there are currently some bundled makefiles and
projects, UnitTest++ is primarily built and supported using CMake.”&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/Testing-C++-with-a-new-Catch</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/Testing-C++-with-a-new-Catch</guid>
        
        <category>C++</category>
        
        <category>testing</category>
        
        
      </item>
    
      <item>
        <title>Choosing the Type of your Types</title>
        <description>&lt;p&gt;In my years as a developer I have used a lot of different programming languages. Most of them I
already tried to ban from my brain again (LISP still seems to give me nightmares from time to
    time – &lt;a href=&quot;http://c2.com/cgi/wiki?LostInaSeaofParentheses&quot;&gt;&lt;strong&gt;L&lt;/strong&gt;ost &lt;strong&gt;I&lt;/strong&gt;na &lt;strong&gt;S&lt;/strong&gt;eaof &lt;strong&gt;P&lt;/strong&gt;arentheses&lt;/a&gt;). At the moment my most frequently used languages
include haskell, C++, Ruby and Lua: I immersed myself in C++ and it’s intricacies. I got to really
love Ruby and it’s ecosystem. Almost choked on haskell before I could swallow it and make it my
default turn-to language. And I was blown away by Lua’s simplicity and range of application.&lt;br /&gt;
Now whenever I start any programming-project, I almost certainly use one of those 4 languages. But
which one? In contrast to a lot of programmers I know I think that static and dynamic typed
languages both have very useful properties. And depending on the kind of project you are doing, one
kind might be more advantageous.&lt;/p&gt;

&lt;p&gt;In this post I’d like to explore how the type of the type-system can influences to the choice of a
programming language for a new project. First let’s look at some of the properties of static and
dynamic type systems. Later I explain what my personal reasoning behind selecting a language and
how it’s type-system relates to that.&lt;/p&gt;

&lt;h2 id=&quot;why-care-about-types&quot;&gt;Why care about Types&lt;/h2&gt;

&lt;p&gt;Proponents of static typing argue that each error caught by the compiler is an error less to
debug/test for. The idea is that a type-checker analyzes the program at compile-time and rejects
everything that is wrong while admitting the correct stuff. That of course makes an intriguing
argument. Type safety is an desirable feature after all. But how does this play out in reality?  &lt;/p&gt;

&lt;div class=&quot;jumbotron&quot;&gt;

&lt;h3&gt;Dynamic and Static Typing&lt;/h3&gt;

This is my understanding of the kinds of typing: in statically typed languages a compiler checks the
types at compile-time, like in C++, Java and Haskell. In dynamically typed languages there are no
such checks, everything is checked at run-time. Examples include Ruby, Lua and Erlang.

&lt;/div&gt;

&lt;p&gt;One of my favorite examples of how the information that is available at compile time is actually not
used is C’s unsafe &lt;em&gt;printf&lt;/em&gt; function. If &lt;em&gt;printf&lt;/em&gt; were type-safe, the following subtle bug just could
never happen:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try2crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;will this crash? %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try2crash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;will this crash? %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try2crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the first &lt;em&gt;printf&lt;/em&gt; statement the programmer forgot to convert the &lt;code&gt;bool&lt;/code&gt; to a string. &lt;em&gt;printf&lt;/em&gt;
assumes the address of a null-terminated string. In case we pass in &lt;code&gt;0&lt;/code&gt;, there is a special
treatment so &lt;em&gt;printf&lt;/em&gt; will output &lt;code&gt;(null)&lt;/code&gt;.  That means everything goes fine as long as &lt;code&gt;try2crash&lt;/code&gt; is
false (which is 0 in C).  But when it is &lt;code&gt;true&lt;/code&gt; (==1 in C) we get undefined behavior and might
crash.&lt;br /&gt;
Using &lt;a href=&quot;http://www.parashift.com/c++-faq-lite/iostream-vs-stdio.html&quot;&gt;&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/a&gt; in C++ would have prevented this bug entirely.&lt;br /&gt;
Ok, but then we have another problem that often gets associated with static typing: the code tends
to get bloated and harder to write. Andrei Alexandrescu provides a nice example in his &lt;a href=&quot;http://erdani.com/publications/cuj-2005-08.pdf&quot;&gt;Type-Safe
Formatting&lt;/a&gt; paper. A seemingly innocuous &lt;em&gt;printf&lt;/em&gt; statement takes some getting used to when
translated to iostreams:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hi, count=%s, time=%s, radius=%-6.2f!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is the same thing in iostreams–based code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savePrec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;precision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmtflags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hi, count=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;, time=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;, radius=&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprecision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// restore formatting state:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprecision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savePrec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As always Andrei has his unique sense of humor and comments:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If iostreams are a step towards the future, I sure hope the future will have a definitive solution
for the Carpal Tunnel Syndrome.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;getting-in-your-way&quot;&gt;Getting in your way&lt;/h3&gt;

&lt;p&gt;Sometimes the type-system really seems to put more obstacles in your way. Using C++ on a daily basis
there definitely are some mis-features that I’d blame the types-system for. Here is one of the
example that is quite annoying (at least to those stuck with C++98):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why should I repeat myself in the definition of m? And why do I have to tell the compiler the type
of the iterator when there is only one possibility? Fortunately things already got better with C++11:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or even better using a range for loop:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still, to a Ruby or Python programmer having to spell out the type &lt;em&gt;explicitly&lt;/em&gt; feels like a sever
obstacle. But there is no way around in languages like Java and C++.&lt;br /&gt;
It might sound that I feel there is too much baggage coming with a static type system, but that is
not at all the case. Some statically typed languages for sure come with an overhead, but I think
this is almost completely related to an inferior type-system.&lt;br /&gt;
Prime examples of static type-systems that just rock can be found in &lt;a href=&quot;http://en.wikibooks.org/wiki/Haskell/Type_basics&quot;&gt;haskell&lt;/a&gt; and &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;. In those
languages the type system is specifically designed NOT to get into your way. Simon Peyton Jones –
the lead developer of the Glasgow Haskell Compiler ghc – &lt;a href=&quot;https://skillsmatter.com/skillscasts/3842-keynote-3842&quot;&gt;talks about&lt;/a&gt; what an ideal type system
should look like: There will always be well typed programs that don’t actually work – but what
really sucks are the programs a type checker refuses despite the fact that they are perfectly ok. A
good type system therefore needs to increase the overlap of those areas.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/typeoftypes/typedprograms.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take type inference for example: you can write most of your haskell code without adding any type
signatures – the compiler &lt;em&gt;implicitly&lt;/em&gt; can figure out the correct types. And if you feel like
adding them, just ask the compiler for it and have your &lt;a href=&quot;https://github.com/eagletmt/ghcmod-vim&quot;&gt;editor insert it on demand&lt;/a&gt;. Type inference
has been around for a long time (&lt;a href=&quot;http://gallium.inria.fr/~fpottier/publis/emlti-final.pdf&quot;&gt;e.g. in ML&lt;/a&gt;) and recently has gained in popularity in languages
such as Scala, Rust and Apple’s &lt;a href=&quot;http://bit.ly/swift-type-inference&quot;&gt;Swift&lt;/a&gt;. It also allows for a very exploratory style of development
inside a REPL. An approach that has worked well for me: First get the functionality, then gradually
add the type signatures to tie down your invariants.&lt;br /&gt;
Here is an example of a function that splits a list into chunks. Notice that we need no type
declaration whatsoever. The compiler can infere the type from the implementation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is type inference in action.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/typeoftypes/inference.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-a-type-can-tell-you&quot;&gt;What a Type can tell you&lt;/h3&gt;

&lt;p&gt;Users of statically typed languages often use the type signature to convey the intention of a
function. The clients of the function gain some insight about the behavior of the code they are using.
That way even an undocumented function still reveals some crucial information and – even better –
now has some compiler checked piece of documentation that will never be outdated.&lt;br /&gt;
What does this mean? Take a look at the type of a certain haskell function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a type signature of a function in haskell. The &lt;code&gt;a&lt;/code&gt; and the &lt;code&gt;b&lt;/code&gt; in the signature are
placeholders for any possible type, which is called &lt;em&gt;parametric polymorphism&lt;/em&gt;. &lt;code&gt;a&lt;/code&gt; could refere to an
Int, a String or any other type. &lt;code&gt;b&lt;/code&gt; is indepent and also can take all possible types.&lt;br /&gt;
The type signature of this ominous function tells us that the first parameter to &lt;code&gt;foo&lt;/code&gt; is a function
itself (&lt;code&gt;(a -&amp;gt; b)&lt;/code&gt;) that consumes input values of type &lt;em&gt;a&lt;/em&gt; and produces a result of type &lt;em&gt;b&lt;/em&gt;. The
second parameter is a list of values of type &lt;em&gt;a&lt;/em&gt;: &lt;code&gt;[a]&lt;/code&gt;, and the result type is a list of
values of type &lt;em&gt;b&lt;/em&gt;: &lt;code&gt;[b]&lt;/code&gt;. I think from this type alone it somewhat seems obvious that we have
kind of a mapping function like Ruby’s &lt;code&gt;each&lt;/code&gt; function, indeed it is haskell’s &lt;code&gt;map&lt;/code&gt; function.
Nobody really needs to read the documentation anymore:&lt;br /&gt;
&lt;em&gt;“map f xs is the list obtained by applying f to each element of xs”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The type of a function is in fact such a powerful piece of documentation that you can even use it to
search for other functions that you might wanna use: just &lt;a href=&quot;http://www.haskell.org/hoogle/&quot;&gt;&lt;em&gt;hoogle&lt;/em&gt;&lt;/a&gt; for it! Let’s say I have a
lexicographical order and I want only those names that start with a vowel. To check this condition,
I want to use a function that takes one of my names as an argument and returns a boolean: &lt;code&gt;name -&amp;gt; Bool&lt;/code&gt;. And I want
to use this function on a list of names &lt;code&gt;[name]&lt;/code&gt;. And the result should be a list of names again
&lt;code&gt;[name]&lt;/code&gt;. So the searching in hoogle could be something like:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; hoogle &quot;(a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]&quot;
Prelude dropWhile :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]
Prelude filter :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]
Prelude takeWhile :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]
...
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;takeWhile&lt;/code&gt; looks like that’s the one to use.&lt;/p&gt;

&lt;h3 id=&quot;get-safer-with-types&quot;&gt;Get safer with Types&lt;/h3&gt;

&lt;p&gt;Independent what kind of typed language you program in, the application of types instead of
primitive values can prevent a lot of ambiguities. In a language with a type-checker you will even
discover any possible misuse at compile time. As an example, here is a function I recently wrote in
C++:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s not hard to see why this kind of function signature might get you into trouble down the road.
Of course it didn’t take long before some user needed a better accuracy. So I changed the signature:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No compile-time or run-time check will save you from harm at this point. Using primitive types to
hide the semantics of your actual data will leave no clue about the real type hiding behind the
value. Same thing is true for strings: as nice it can be to encode some values in strings, using
them as the type of your parameters they won’t reveal any useful information about the actual
structure of the value hiding inside.&lt;br /&gt;
Here is the version I wish I had written from the beginning:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;typing-for-the-lazy&quot;&gt;Typing for the Lazy&lt;/h3&gt;

&lt;p&gt;As convenient as modern statically typed languages might allow you to integrate types into your
application, using a dynamic language like Ruby will always be quicker for a lot of coding tasks. It
frequently happens that I write a chunk of Ruby code, run it – expecting it to crash on some type
mismatch – only to find that it works just fine! It’s exactly this very hard to tie down property
of dynamic languages like Ruby that makes them such a productivity boost. Programming like this
might sometimes be kind of careless — but it often is quite carefree as well.&lt;br /&gt;
Languages like Ruby or Python might not be statically typed, but they still have a strong
type-system. Since they are interpreted instead of compiled, an easy check by a compiler is not
possible. The types are checked at runtime and will fail in a rather graceful manner (much better
then the runtime crashes you get in C++). However, gaining a similar level of confidence is still
feasible — by writing the right kind of unit tests that exercise the code so that type mismatches
are caught nevertheless.&lt;br /&gt;
But here you cannot be lazy and really have to write the tests! Which I find amazingly hard! Writing
good and maintainable unit tests is difficult and takes some thinking. Bad unit tests will come
haunt you at the latest when you want to refactor your code. Having said this, the nature of dynamic
languages like Ruby makes writing tests a &lt;em&gt;lot&lt;/em&gt; easier! You don’t have to invent interfaces to stub
out functions or introduce mock objects. Just use any object that is convenient for your test,
stick the method you need to it – and duck-typing will take care of the rest.&lt;/p&gt;

&lt;p&gt;Another amenity often attributed to dynamic languages is conciseness. While it’s definitely not true
that statically typed languages imply verbosity – haskell is a wonderful counter example – there are
some that are virtually unmanageable without the support of a good IDE (like Java). And while the
task of writing the code can somewhat be eased by IDEs, the task of reading code is not!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Working with languages such as Java and C# I always feel the need to skip over text in order to
understand what’s going on. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping your code-base tight and clean will leave it more readable and transparent. People will have
a much easier time finding bugs or just changing things around.&lt;/p&gt;

&lt;h2 id=&quot;deciding-on-the-types&quot;&gt;Deciding on the Types&lt;/h2&gt;

&lt;p&gt;Choosing a programming language and – with it – the nature of the type-system will have
consequences in different areas: the development ecosystem, the build process, the testing strategy
and much more.&lt;/p&gt;

&lt;h3 id=&quot;saddle-up-for-a-new-project&quot;&gt;Saddle up for a new project&lt;/h3&gt;

&lt;p&gt;Starting out with a new project you obviously have to make a decision on the programming environment
you’d like to use. When I do a project just for myself I don’t want to waste any time with setup
stuff so the initial effort has to be as painless as possible. And getting started in a Ruby
environment seems to be the quickest way to me.&lt;br /&gt;
Getting everything ready for a haskell project seems similarly simple but does suffer a little speed
bump when you compile a lot of the dependencies in a sandbox.&lt;br /&gt;
All this setup stuff might seem negligible but I found it can be a major stumbling block that can
prevent you from starting a project at all. So I’m really a fan of a lean setup! The quicker the
setup, the more likely it is to start in the first place.&lt;br /&gt;
It’s arguably also very fast to setup a Java project. That is, if you use an IDE – which not
everyone does! But have you ever tried to setup an Android project &lt;em&gt;without&lt;/em&gt; eclipse or intellij?
That’s not what I’d call light-weight!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xkcd.com/378/&quot;&gt;
  &lt;img class=&quot;img-responsive&quot; src=&quot;/img/typeoftypes/real_programmers.png&quot; alt=&quot;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;go-with-the-flow&quot;&gt;Go with the Flow&lt;/h3&gt;

&lt;p&gt;Once your environment lets you to write and run some code, the most important factor for me is
having fun with it! Getting stuff done is fun. Writing an elegant piece of code is fun. Changing
things on the fly and see them working again is fun!&lt;br /&gt;
What is not so much fun is when you &lt;a href=&quot;http://www.reddit.com/r/cpp/comments/2dledw/i_just_produced_a_single_488k_boost_error_any/&quot;&gt;get bogged down by some obscure compiler error&lt;/a&gt;! It’s also not
fun when you would rather change some of your code but do not dare to on the risk of breaking your
program.&lt;br /&gt;
In general I’d consider everything that impedes the flow of the programming experience as a bad
thing. In light of these observations, which type of programming language solves the majority of
the problems while remaining fun to use?&lt;/p&gt;

&lt;h3 id=&quot;the-kind-of-project&quot;&gt;The Kind of Project&lt;/h3&gt;

&lt;p&gt;In many cases the decision to use a statically or dynamically typed language on a project is not an
open choice anyway. If you only have a C-compiler for your embedded target, your choices are kind of
limited. In other situations there might be a non-functional requirement imposed by your client.&lt;br /&gt;
But let’s suppose we are free to choose whatever we like. For these cases I have my own checklist —
which of course is highly subjective and heavily influenced by my own development background.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Working alone or on a team?&lt;/strong&gt;&lt;/em&gt;
When I’m working alone, the choice of static or dynamic is not important. However, it’s different
when working on a team. Communication is crucial and a language with a static type system can help,
especially if the type system is very expressive. The intended usage of a function becomes more
obvious to me when I see what types the function is supposed to work on. And using functions in an
unintended way just becomes less likely. So in general I’d choose to go with a statically typed
language.&lt;br /&gt;
Having said this it’s obviously true that there are a lot of huge rails developments going on
that just work fine. So the dynamic nature of the type of a language certainly does not prevent such
projects – you just have to do some stuff manually that a good type checker could take care of: put
tighter control on the interfaces between different components in your system (e.g. plugin systems),
make sure you have regression tests that exercise the constraints you’d like the system to obey to,
use commonly understood conventions a.s.o.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Writing a script like application?&lt;/strong&gt;&lt;/em&gt;
There is not really a decision to make here – it’s just ideal to use a dynamic language. In fact
for quite some time now I have written all of my shell-scripts and &lt;a href=&quot;http://marcmo.github.io/cxxproject/&quot;&gt;build-scripts&lt;/a&gt; in Ruby. The OS
abstraction for everything you’d need is decent, string processing is a bliss and combining that
with some a sensible internal DSL&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; just makes your scripts fly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Working on a quick prototype?&lt;/strong&gt;&lt;/em&gt;
For this one it’s almost a tie: dynamically typed of course, but especially haskell can really stick
out in this area, too. While I find it very convenient to solve real world problems in Ruby, haskell
seems to be a better fit when the problem at hand itself is not well understood. Systems can be
built in a very type-driven kind of style: first think about what kind of abstractions make sense
for your domain and what functions you’d need to operate on your data. In haskell you can leave out
the implementation and still typecheck your program. Then gradually start filling in the
implementations. &lt;a href=&quot;http://tomasp.net/blog/type-first-development.aspx/&quot;&gt;Tomas Petricek&lt;/a&gt; has written a nice post about what he calls TFD — Type First
Development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Working on a long living software?&lt;/strong&gt;&lt;/em&gt;
The picture is again much clearer when I plan to keep working on the project for a long time: I
wouldn’t want to miss the comfort of a good type-checker when I come back after a year, change some
stuff and get smacked upside the head for all the places I forgot to adapt. You don’t even need a
language with a clever type system. C++ and Java will do just fine.&lt;br /&gt;
Again, achieving an equal level of confidence is possible with tests, but call me lazy – I like
that the compiler takes care of some of the checks!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Performance matters?&lt;/strong&gt;&lt;/em&gt;
It always does, doesn’t it? Well, it really depends… Compiled languages tend to be faster since
the compiler can produce natively executable code for a specific processor. A dynamic language is
interpreted and all the translation step has to be done at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benchmarksgame.alioth.debian.org/&quot;&gt;
  &lt;img class=&quot;img-responsive center-block&quot; src=&quot;/img/typeoftypes/ruby_vs_cpp.png&quot; alt=&quot;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For most of the tasks at hand I found even Ruby will do the job in an adequate time frame. But
sometimes speed is really an issue, and this is when I value C++ the most. Haskell’s performance
usually can almost match up, but tuning a C++ program for speed is still easier for me than
optimizing the haskell version.&lt;br /&gt;
Lua surprisingly also does really well in this area. Especially when using &lt;a href=&quot;http://luajit.org/&quot;&gt;luajit&lt;/a&gt;, a Just-In-Time
Compiler for Lua. And for really performance critical functions Lua makes it &lt;a href=&quot;http://luajit.org/ext_ffi_tutorial.html&quot;&gt;astonishingly easy&lt;/a&gt; to
call out to a C implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working on an embedded target?&lt;/strong&gt;
In my daily work I work a lot with really small embedded systems. That’s something like 256 KB of
RAM and 2MB of flash memory and very limited processing power. For such a constraint system it’s
kind of a natural choice to stick with a low level compiled language. And the one low level language
that will still give you some usable support on the type level is C++.&lt;br /&gt;
But not all hope is lost! There is this tiny language: Lua! Which really is tiny! In one of our
systems we use it on such a controller in addition to the native code and it only needs s.th. like
20 KB of RAM and 64KB of flash memory. And for some applications it’s really nice to have a way to
change some code without having to recompile, build and flash a binary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Need to get s.th. done quickly?&lt;/strong&gt;
Then the type-system really should not get in the way! So haskell would be a good fit since it’s
possible to express a lot in a very concise way. Ruby seems to be even quicker. It’s similarly
concise and makes the development cycle even shorter. And getting stuck on a problem is rare in Ruby
since there is an &lt;a href=&quot;http://stackoverflow.com/questions/tagged/ruby&quot;&gt;abundance of tips&lt;/a&gt;, articles and tutorials on every topic I googled so far.&lt;/p&gt;

&lt;h2 id=&quot;yours-to-choose&quot;&gt;Yours to choose&lt;/h2&gt;

&lt;p&gt;To me it’s not a black and white kind of decision to make. Both statically and
dynamically typed languages have applications where they particularly shine. But it does make a huge
difference if you pick a language with a bad type-system or with a good one. I found that languages
with an inferior type system will cause all kinds of trouble and overhead. Using haskell or Scala a
lot of those troubles just don’t exist anymore (e.g. type-inference is a huge step forward).&lt;br /&gt;
In reality the end justifies the means. If the language of your choice does a decent job to help you
implement the requirements of the application, just use it.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://martinfowler.com/bliki/DynamicTyping.html&quot;&gt;Martin Fowler on dynamic typing&lt;/a&gt;  &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Domain Specific Language &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 31 Aug 2014 14:00:00 +0200</pubDate>
        <link>http://blog.coldflake.com/posts/choosing-the-Type-of-your-Types</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/choosing-the-Type-of-your-Types</guid>
        
        <category>types</category>
        
        <category>C++</category>
        
        <category>lua</category>
        
        <category>haskell</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Testing Without A Brain</title>
        <description>&lt;p&gt;Testing software is perhaps one of the most controversial topics among programmers. Opinions range
from “test first and test everything” to “tests slow us down”. As with so many things, the truth
lies somewhere in between. After making my own experiences in a lot of different projects, I have to
admit to myself that finding the perfect balance is still a hard a lot of times.&lt;/p&gt;

&lt;p&gt;Starting out in a new project, time pressure usually is low and we programmers are highly
motivated to get our hands dirty with coding rather than eliciting yet another requirement. I found
that people tend to write unit tests more readily at this stage. And arguably the code quality seems
to be better than when working under tight deadlines. But that’s not necessarily related to the
tests, it could very well be attributed to the relative freshness of the people on the project.&lt;br /&gt;
As projects get into a more intense phase the ratio between test-code and production-code usually
takes a hit. So is this a bad thing?&lt;/p&gt;

&lt;h2 id=&quot;how-much-is-too-much&quot;&gt;How much is too much&lt;/h2&gt;

&lt;p&gt;Kent Beck, the originator of the term &lt;em&gt;Test Driven Development&lt;/em&gt; for sure has a ton of experience
in writing software and in testing it. It might come as a surprise for many that he draws a pretty
tight line between what is actually too much testing&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I get paid for code that works, not for tests, so my philosophy is to test as little as possible
to reach a given level of confidence…&lt;/p&gt;

  &lt;p&gt;If I don’t typically make a kind of mistake … I don’t
test for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To me that sounds very reasonable. Blindly striving for a high test coverage just doesn’t cut it. On
the contrary: if a programmer is just guided by his coverage report, he will probably write some
hard to maintain test code. And hard-to-maintain test code will eventually lead to reduced testing
since the damn tests require more and more work to keep them in sync with changes made to the
software. Those tests will get kicked out – and that with good reason!&lt;/p&gt;

&lt;p&gt;There is another issue I found with some of my unit testing: Overuse of abstractions. While I’d
consider abstractions in general a desirable and good thing, they really only make sense when there
is the actual need for an abstraction. If you only have one implementation of some functionality in
your code, why go through the effort of generalizing? Since by definition there is only one thing to
abstract about, your abstraction will probably have to be refined when introducing a second
implementation.&lt;br /&gt;
But writing unit-tests mandates the use of abstractions since you only want to test some piece of
code in isolation of the rest of the system – for which some kind of interface definitions come in
handy. So you bite the bullet and create your interfaces, change the code around, build mocks and
other scaffolding and hours later start writing your tests…while at the same time you could have
cranked out this extra feature or stomped this nasty bug. Sounds like a tough choice to me.&lt;/p&gt;

&lt;h2 id=&quot;the-kind-of-software&quot;&gt;The kind of software&lt;/h2&gt;

&lt;p&gt;When people show me their incredibly cool new test framework or preach about the absolute imperative
of having thoroughly unit-tested code, the examples they come up with usually lend themselves to a
unit-test centric approach. But we rarely have to write the next sorting algorithm or code to
serialize and de-serialize data.&lt;br /&gt;
The day-to-day stuff often involves database access, updating a UI,
network code a.s.o. Those things are by far harder to cover by unit-tests and tend to involve some
heavy machinery. Time spent with setting up unit-tests might be spent more effectively otherwise.  &lt;/p&gt;

&lt;h2 id=&quot;the-kind-of-testing&quot;&gt;The kind of testing&lt;/h2&gt;

&lt;p&gt;I still consider testing my software with due diligence an integral part of the job. For some code
this might very well be exhaustive unit testing, in other cases a different strategy might prove
the better choice – like moving more into a more global approach where the functionality is tested
as part of a bigger use-case. This kind of testing – often called integration-testing – is much
harder to automate and thus does not always allow for regression testing, but it can be the right
choice and help you to implement &lt;em&gt;and&lt;/em&gt; test your code more quickly.&lt;br /&gt;
There is another very different flavor of testing I so far omitted: the kind of testing in a
dynamically typed language that makes sure that trivial (or not so trivial) changes do not completely
mess up your code-base. Those tests – I’d rather call them &lt;em&gt;syntactic checks&lt;/em&gt; – are a
prerequisite to stay sane. I did a couple of larger ruby programs and it was really painful to come
back to the code at some point later: to find out I had a hard time to introduce changes just
because I broke the code in unintended ways and my test coverage was not high enough to detect it.&lt;/p&gt;

&lt;h2 id=&quot;striking-a-balance&quot;&gt;Striking a balance&lt;/h2&gt;

&lt;p&gt;So what would be good advice for that new guy that started in your C++ department yesterday. Test
everything? Strive for high coverage? I’d say yes – but as with every advice this should be taken
with a grain of salt. If you end up with double the amount of code and possibly a different design
I’d say you clearly overshot. In the end it’s not the unit-tests that are responsible for great
software – it’s the talent and the ability of the developer.&lt;br /&gt;
On the other hand if the new guy writes your next rails application, the answer is much simpler:
test the shit out of the code!&lt;/p&gt;

&lt;h2 id=&quot;the-feedback-loop&quot;&gt;The Feedback Loop&lt;/h2&gt;

&lt;p&gt;[Edit] After some discussion I had at my office I realized I forgot to mention a very important detail that
might well favor the &lt;em&gt;test first and test everything&lt;/em&gt; approach – the feedback loop. No matter if you
use unit-tests, integration tests or any other kind of process that helps you validate your software
behaves as expected: you absolutely got to have some way of harvesting feedback.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if you program in a compiled language&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deploy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Developing a smartphone app might incur enough of a delay in this cycle to make you fly blind for a
prolonged period of time. I find that less of a problem since this loop can usually be optimized
pretty well (even though I mostly develop for embedded targets). But it’s not unheard of that in
some organizations (e.g. an unnamed company I was working for in the past) not every developer has
the luxury of his own setup and sometimes even has to share the license for the compiler. If you are
stuck in such a situation a comprehensive suite of unittests will definitely make your life easier!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[Edit 2] I just found a nice little &lt;a href=&quot;http://stoneship.org/essays/tdd-bypasses-your-brain/&quot;&gt;article on software testing&lt;/a&gt; that contains some very true points
and one really nice quote &lt;a href=&quot;https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html&quot;&gt;from Edsger W. Dijkstra&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Today a usual technique is to make a program and then to test it. But: program testing can be a very
effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;see Kent Beck’s reply on stackoverflow to &lt;a href=&quot;http://stackoverflow.com/questions/153234/how-deep-are-your-unit-tests&quot;&gt;“How deep are unit tests”&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 16 Aug 2014 14:00:00 +0200</pubDate>
        <link>http://blog.coldflake.com/posts/Testing-without-a-Brain</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/Testing-without-a-Brain</guid>
        
        <category>testing</category>
        
        <category>rant</category>
        
        
      </item>
    
      <item>
        <title>Android Style Message Passing</title>
        <description>&lt;p&gt;Last week I finished a substantial rewrite of the concurrency portions in the code of a fairly
complex embedded system we currently develop at work. It has been quite a roller-coaster ride and I
went back and forth between moments of joy and situations where I would tear my hair out. In the end
I’m quite happy with the result and want to reflect about some of the things I learned.&lt;/p&gt;

&lt;p&gt;Our target platform is very restricted concerning memory footprint and CPU and we have only a very
basic operating system. Thankfully we can use C++ (with some restrictions) so it’s a rather pleasant
development platform. The OS has support for &lt;a href=&quot;http://en.wikipedia.org/wiki/Preemption_(computing)&quot;&gt;preemptive scheduling&lt;/a&gt; of computational execution
units similar to threads that all share the same address space. To simplify the discussion I will
refer to them simply as &lt;em&gt;threads&lt;/em&gt;. Those threads are created at startup only and are assigned static
priorities that only change briefly when &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_ceiling_protocol&quot;&gt;priority ceiling&lt;/a&gt; kicks in to avoid &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_inversion&quot;&gt;priority inversion&lt;/a&gt;
style problems. Most of the threads are not allowed to block as they need to guarantee some realtime
behavior. Other threads run with a lower priority and might execute some blocking and potentially
long-running IO function (e.g. write to persistent memory).  &lt;/p&gt;

&lt;h2 id=&quot;i-classicon-threadi-thread-communication&quot;&gt;&lt;i class=&quot;icon-thread&quot;&gt;&lt;/i&gt; Thread Communication&lt;/h2&gt;

&lt;h3 id=&quot;using-shared-memory&quot;&gt;Using Shared Memory&lt;/h3&gt;

&lt;div class=&quot;jumbotron&quot;&gt;

&lt;h3&gt;Shared Memory&lt;/h3&gt;

&lt;table class=&quot;table borderless&quot;&gt;
  &lt;tbody&gt;
    &lt;tr class=&quot;odd&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;icon-plus-sign&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;easy to get something going quickly&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;even&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;icon-plus-sign&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;performance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;odd&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;icon-plus-sign&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;concurrency primitives are usually made available by the OS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;even&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;icon-minus-sign&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;prone to deadlocks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;odd&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;icon-minus-sign&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;potentially lots of &lt;a href=&quot;http://en.wikipedia.org/wiki/Critical_section&quot;&gt;critical sections&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;Threads can communicate using shared memory. But that needs some form of synchronization to avoid
&lt;a href=&quot;http://en.wikipedia.org/wiki/Race_condition&quot;&gt;race conditions&lt;/a&gt;. Every access to a shared mutable chunk of data needs to be protected to enforce
the correct sequence of writes and reads. This can be achieved using some form of lock mechanism but
is a notoriously tricky task to get right. You might end up with data races or deadlocks.&lt;br /&gt;
An effective technique to minimize the regions of code that need protection is to try to move all
code execution that needs to use shared memory onto the same thread of execution. That way a lot of
the API calls might not need to offer a thread-safe interface → less chance to mess things up
(miss)using locks. One way to achieve this is to post an executable code unit to another thread
(&lt;a href=&quot;/posts/2014-01-12-C++-delegates-on-steroids.html&quot;&gt;delegates&lt;/a&gt; are especially well suited). That’s the kind of approach Android follows with
&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;AsyncTasks&lt;/a&gt;. The motivation here is that the UI must not be manipulated from any other context but
the UI thread.&lt;/p&gt;

&lt;p&gt;The approach we took so far is just that: try to reduce the critical sections to a minimum by
pushing delegates around and executing them in other threads. We also implemented our own version of
futures (unfortunately our &lt;a href=&quot;http://www.windriver.com/products/development_suite/wind_river_compiler/&quot;&gt;stupid compiler&lt;/a&gt; does not feel the need to support C++11 features yet)
which is a huge help to avoid the asynchronous &lt;em&gt;callback-hell&lt;/em&gt;. But futures have a noted problem:
they introduce blocking into the system which is highly undesirable!&lt;/p&gt;

&lt;h3 id=&quot;communicating-with-messages&quot;&gt;Communicating with Messages&lt;/h3&gt;

&lt;p&gt;Using messages to invoke a certain behavior might sound unfamiliar to most object oriented
programmers today but is actually one of the original concepts behind object orientation. Java or
C++ hide the messaging idea behind the scenes, smalltalk makes no fuss about it: you use messages to
communicate. But those forms of communication are &lt;em&gt;synchronous&lt;/em&gt;, i.e. the caller blocks until the
receiver has finished executing code.&lt;br /&gt;
In smalltalk sending messages has the form of &lt;code&gt;[object] [message]&lt;/code&gt;. Here is a small example from
smalltalk where we send the message factorial to 42:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For making use of message passing in a concurrent environment, it needs to be &lt;em&gt;asynchronous&lt;/em&gt; (→
non-blocking). The caller sends a message and is done. If some information needs to be transfered
back to the caller, this has to happen in another message. To be able to work on messages, the
caller needs to maintain a message-queue. Messages from a caller will be enqueued and processed on
the receiver thread.&lt;br /&gt;
Message-queues are traditionally a tool for synchronizing access to shared resources. To hand of
work to another thread, some form of executable units can be added to the queue by multiple caller
threads. A worker-thread picks up those units sequentially and executes them. The only thing that
needs to be synchronized here is the access to the message-queue. Here is the general idea:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// caller-thread&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;messageQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// worker-thread&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;workItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//will block until work is available&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;workItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//execute the code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This model is famously used by Erlang and even has the potential to be used for distributed systems
since the communication threads/processes do not need to share the same address space. All the
locking is happening under the hood (the message queue takes care of this) so the programmer
does not need to worry about it.&lt;/p&gt;

&lt;h2 id=&quot;message-passing-in-android&quot;&gt;Message Passing in Android&lt;/h2&gt;

&lt;p&gt;Android has picked up on this idea and makes use of it in form of the &lt;a href=&quot;http://developer.android.com/reference/android/os/package-summary.html&quot;&gt;looper framework&lt;/a&gt; which you
can find in multiple places inside the Android source code. This framework is a very handsome form
of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Active_object&quot;&gt;active object pattern&lt;/a&gt; that is primarily used to enforce a non-blocking and responsive
UI-thread. It is mainly implemented in the classes &lt;strong&gt;Looper&lt;/strong&gt;, &lt;strong&gt;Handler&lt;/strong&gt; and &lt;strong&gt;MessageQueue&lt;/strong&gt;.  &lt;/p&gt;

&lt;div class=&quot;jumbotron&quot;&gt;


&lt;h3 id=&quot;active-object&quot;&gt;Active Object&lt;/h3&gt;

&lt;p&gt;For those who are familiar with the active object pattern, here is an overview of how the concepts
match to the Android Looper framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Looper&lt;/em&gt; corresponds to the &lt;em&gt;Scheduler&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Handler&lt;/em&gt; to the &lt;em&gt;Servant&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;MessageQueue&lt;/em&gt; to the &lt;em&gt;ActivationList&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;For me the most natural way to grasp those concepts was to associate the motivation behind this
framework with the implementation details: we are running on a client thread and want to have code
executed in another thread context.&lt;br /&gt;
A queue is a perfect match since we can enqueue our request (= message) that
will later be serviced. So we got the &lt;strong&gt;MessageQueue&lt;/strong&gt;.&lt;br /&gt;
Now we need someone who picks up our message in the worker thread and schedules the processing of
it. That’s the job of the &lt;strong&gt;Looper&lt;/strong&gt;.&lt;br /&gt;
Once the Looper has popped of a message of the message-queue, it needs to know &lt;em&gt;who&lt;/em&gt; should process that message: and here we get to the
&lt;strong&gt;Handler&lt;/strong&gt;.&lt;br /&gt;
There is no need for explicit locking, synchronization happens implicitly inside the message-queue.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/looper/Looper.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One looper has one message-queue, each message has a handler and each handler is associated with
exactly one looper. The handler is bound to it’s looper at construction time and will only be executing
in the thread the looper is running in.&lt;/p&gt;

&lt;h2 id=&quot;message-passing-in-c&quot;&gt;Message Passing in C++&lt;/h2&gt;

&lt;p&gt;The Android looper framework is all java code which I cannot use. But fortunately &lt;a href=&quot;http://himmele.blogspot.de/&quot;&gt;a colleague&lt;/a&gt; took
the time to do an efficient &lt;a href=&quot;https://github.com/Himmele/Mindroid.ecpp&quot;&gt;C++ port&lt;/a&gt; which is easily portable for multiple platforms. This was just the
right starting point for our project and we could reuse the code with only some minor modifications
(mostly to sacrifice functionality for a even more reduced memory footprint).&lt;br /&gt;
Each incoming message features a reference to the handler who is needed to perform a service.
The looper code shows what’s going on. Here is the main workhorse-function that drives the whole
asynchronous message processing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// static function&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLooper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//looper for current thread&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MessageQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMessageQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cloneMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cloneMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatchMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloneMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;jumbotron&quot;&gt;

&lt;h3 id=&quot;condition-variable&quot;&gt;Condition Variable&lt;/h3&gt;

&lt;p&gt;Sometimes threads need to wait for some condition to become true. A condition-variable is a
synchronization primitive that can be used for that purpose: block until some other thread signals
or a timeout occurs. To use the wait function, the thread first needs to acquire a lock. This lock
will be released by the condition-variable as long as the thread is halted. Once the
condition-variable notifies and the thread continues, the lock is re-acquired.&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;Since a looper is specific to the thread it is running on, the &lt;em&gt;loop&lt;/em&gt; function can be static and figures
out which looper is running in the current thread (&lt;em&gt;myLooper&lt;/em&gt;). Quite similar to the message queue
pseudo code sample from above, the looper loops through the message queue to schedule the next
request. For each dequeued message, it reaches for the handler associated with it to
process the message. Since each message knows about it’s handler, it’s quite natural to have
multiple handlers that each are responsible for different services.&lt;/p&gt;

&lt;p&gt;The message queue itself works on a linked list of messages. Most of the times the queue itself is
implemented as a priority queue or a simple FIFO. It’s main functions are enqueue and dequeue.&lt;br /&gt;
An enqueue is triggered through client code, the dequeue happens on the looper (worker) thread and
might even block when there is nothing left in the queue. A condition variable is used for
synchronization. In case the message-queue in a looper is empty it will block on a dequeue by using
a condition variable to &lt;em&gt;wait&lt;/em&gt;. The calling thread will trigger a &lt;em&gt;notify&lt;/em&gt; for the condition
variable and will get the blocked thread and the looper inside going again.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueueMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// check if the message is valid and we are not quitting&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// insert message into linked list according to timestamp&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCondVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// RAII style locking&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AutoLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCondVarLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mQuiting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonicTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// getNextMessage returns next due message or NULL if nothing is due&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNextMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHeadMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// there are messges in the queue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHeadMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mExecTimestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// wait until next message is due&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCondVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absExecTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no messages available, just wait until notified&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCondVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the client, sending a message instead of calling a blocking function requires some fundamental
changes in the the way the code is structured. Functionality is no longer specified by abstract base
classes and virtual functions but through a set of predefined integral values that are used to type
messages. Those message-ids (or event-ids) are needed so that the Handler can dispatch on them
and invoke the required functionality.  For the result the caller will only be notified in an
asynchronous fashion (if needed at all).&lt;br /&gt;
A client that wants to send a message first needs to &lt;em&gt;obtain&lt;/em&gt; a message from the receiving Handler.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessageDelayed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For obtaining a message from a handler we need to pass in another message object which is a nice way
to enforce the responsibility of the resource management for messages on the caller side. Here a
message will receive the reference to it’s handler. This message can then be sent (&lt;em&gt;sendMessage&lt;/em&gt;)
which triggers the whole looper mechanism and asynchronously ends up in the &lt;em&gt;handleMessage&lt;/em&gt; function
of the handler.  This &lt;em&gt;handleMessage&lt;/em&gt; function will finally dispatch on the message-id which got
it’s value from the &lt;em&gt;what&lt;/em&gt; argument in &lt;em&gt;obtainMessage&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;EVENT_ID_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do your stuff&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the message passing approach also allows to send messages to ourselves if we are a
handler. That way we get a &lt;em&gt;timer&lt;/em&gt; mechanism for free by sending a message obtained from &lt;code&gt;*this&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;programming-in-message-passing-style&quot;&gt;Programming in Message Passing Style&lt;/h2&gt;

&lt;p&gt;As already pointed out, the interaction patterns of code using asynchronous message passing instead
of conventional function calls are drastically different. There are no direct return values and code
that used to make one function call after another has to be factored into multiple functions that in
turn get called with the results.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/looper/messagePassing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And even more, it’s no longer possible to use stack allocated variables as arguments to the function
call since there won’t be any stack after our function ends.  One way around that is to use heap
allocated structs that pack the information for the function call together and attach those to the
message. Here is an example of a formerly synchronous call where the execution get’s moved to a
background thread. The synchronous version looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;bufferLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;MAX_LEN_RESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;encryptedLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using a struct to transport all the parameter information looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parameter pack&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// constructor etc.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data2encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxEncryptedLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptedDataLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// usage&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bufferLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MAX_LEN_RESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encryptedLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// obtain the response message&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_ENCRYPTION_FINISHED_EVENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// attach context&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;responseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// obtain the actual message&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message2handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENCRYPT_DATA_EVENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// attach response message&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message2handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// send message will enqueue message in the handler&amp;#39;s message queue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message2handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The trick here is to use two messages: one for the request and one for the response. That way we can
let the handler know who will process the response (remember, each message knows it’s handler). So
we process the response ourselves and have to implement the &lt;em&gt;Handler&lt;/em&gt; interface.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/looper/messageInMessage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we are a &lt;em&gt;Handler&lt;/em&gt;, we obtain a message from ourselves that we attach to the message we
obtain from the receiving handler (&lt;em&gt;myService&lt;/em&gt;). When the &lt;em&gt;myService&lt;/em&gt; object later handles our
message, it can use the attached message to fire the response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ENCRYPT_DATA_EVENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// get the response message&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// grab the context from the response message&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// execute synchronous call&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data2encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxEncryptedLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptedDataLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendToTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// send response back&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the worker thread we can finally get all the context for the synchronous call and send back a
message with the results so that our client can continue. Notice that there is no need for the
service code to clean up anything since the client can take care of cleaning up itself.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;DATA_ENCRYPTION_FINISHED_EVENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypt_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;encryption failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// continue processing&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once our client handler receives the response message, it can query the result and clean up the heap
allocated objects.&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-async-jungle&quot;&gt;Welcome to Async Jungle&lt;/h2&gt;

&lt;p&gt;On first sight this asynchronous way of calling functions adds a lot of overhead and complexity.
Checking results on blocking function calls is no more… for every call we have to switch context
and loose our stack. And debugging your multi-threaded application is not getting easier: wanna take
a look at your call stack? Well you’re out of luck, the stack no longer provides a view into the past.&lt;br /&gt;
But there are big gains as well. Most important: no need for explicit locking and a non blocking,
responsive codebase which can be vital e.g. if you are running in the UI thread! Once the code is
restructured it actually feels nice and tidy again. And in the lack of a full-blown stack for
debugging purposes can be mitigated somewhat by adding logging facilities in your message queues.&lt;br /&gt;
And another very useful side-effect (especially for memory constraint systems) is that the stack sizes
actually do not grow as much which allows for a reduced memory footprint.&lt;/p&gt;

&lt;h2 id=&quot;the-good-the-bad-and-the-ugly&quot;&gt;The Good, the Bad and the Ugly&lt;/h2&gt;

&lt;p&gt;To completely become aware of the ramifications of the changes introduced for applying the message
passing paradigm it will probably take some time getting used to it and gaining experience. So far
our impression is throughout positive. Resource consumption actually went down while all the
explicit locking has disappeared. The code looks &lt;em&gt;very&lt;/em&gt; different but that’s not necessarily a bad
thing. All in all I’m quite happy with our new concurrency architecture. Thanks to &lt;a href=&quot;http://himmele.blogspot.de/&quot;&gt;Daniel&lt;/a&gt; for
bringing this approach to my attention and providing such a nice native implementation.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Feb 2014 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/Android-style-Message-Passing</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/Android-style-Message-Passing</guid>
        
        <category>android</category>
        
        <category>C++</category>
        
        <category>concurrency</category>
        
        <category>ipc</category>
        
        
      </item>
    
      <item>
        <title>C++ Delegates On Steroids</title>
        <description>&lt;p&gt;Yesterday I came across an &lt;a href=&quot;http://www.jeremyong.com/blog/2014/01/10/interfacing-lua-with-templates-in-c-plus-plus-11/&quot;&gt;excellent article&lt;/a&gt; from &lt;a href=&quot;https://github.com/jeremyong&quot;&gt;Jeremy Ong&lt;/a&gt; that introduces
an extremely nice solution for integrating C++ and Lua code. Jeremy used a
technique based on C++ meta-programming in conjunction with C++11 variadic
templates to call Lua functions from C++ code.&lt;br /&gt;
That reminded me of some other example where variadic templates have been a joy
to work with: coding delegates in C++.&lt;/p&gt;

&lt;h2 id=&quot;why-delegates&quot;&gt;Why Delegates?&lt;/h2&gt;

&lt;div class=&quot;jumbotron&quot;&gt;

&lt;h3&gt;&quot;Don&#39;t call us, we&#39;ll call you&quot;&lt;/h3&gt;

Delegates enable you to pass around callable entities without introducing a too
tight coupling that is usually the case when using interfaces in form of
abstract base classes. They are a little like function pointers in C but in a
more type-safe manner and do not only work for free functions but also for
member functions. As such they are well suited e.g. for systems that communicate
through events.

&lt;/div&gt;

&lt;p&gt;So why use delegates when you can also pass around objects that offer the
required virtual functions in their interface? This works but introduces too
many dependencies for my taste. What if you cannot change the interface of the
object you are using? By using delegates instead of an explicit interface the
requirements for client code are minimized. If you are implementing some kind of
asynchronous service, it’s always a good idea to assume the least possible
amount about your users. The result is a more functional rather then object
oriented API.&lt;br /&gt;
Further more, no virtual functions are needed whatsoever which can be important
when memory is scarce. The delegates I am talking about have a compile time
interface only.&lt;/p&gt;

&lt;h2 id=&quot;first-implementation&quot;&gt;First Implementation&lt;/h2&gt;

&lt;p&gt;Before starting of I’d like to mention that the whole idea behind this delegate
implementation originates from &lt;a href=&quot;http://www.codeproject.com/Members/Sergey-Ryazanov&quot;&gt;Sergey Ryazanov&lt;/a&gt; who wrote an excellent article
about &lt;a href=&quot;http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates&quot;&gt;the impossibly fast c++ delegate&lt;/a&gt;. It is by no means complete but
hopefully conveys the underlying ideas as well as the motivation for using
variadic templates.&lt;br /&gt;
The goals for Sergey’s implementation were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;performance (the faster the better)&lt;/li&gt;
  &lt;li&gt;no dynamic memory allocation&lt;/li&gt;
  &lt;li&gt;compatible with the C++ Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exactly the things that were also important to my usage (mainly in embedded
systems programming) where dynamic memory allocation is often not possible.&lt;br /&gt;
The trick for a Delegate implementation is that the code that will end up
calling back your delegate must not have any type dependencies to the code that
implements the callback function. In Sergeys implementation a Delegate will
store an &lt;em&gt;untyped pointer to an object&lt;/em&gt; and a &lt;em&gt;member-function-pointer&lt;/em&gt;.&lt;br /&gt;
Here is a first sketch for a fixed return type and a fixed parameter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Delegate&lt;/code&gt; class provides two public functions: the static &lt;code&gt;from_function&lt;/code&gt;
is used to construct the delegate. Here the instance itself is stored along with
a &lt;code&gt;methodCaller&lt;/code&gt; function pointer that casts the untyped stored pointer back to
it’s original type. The function call operator will be used to invoke the
delegate.&lt;br /&gt;
Notice that the compiler will bake in the type information about &lt;code&gt;T&lt;/code&gt; so that
when the delegate is invoked it knows exactly about the types involved. Thus the
&lt;code&gt;static_cast&lt;/code&gt; in the &lt;code&gt;methodCaller&lt;/code&gt; is by no means unsafe.&lt;/p&gt;

&lt;h3 id=&quot;checking-equality&quot;&gt;Checking Equality&lt;/h3&gt;

&lt;p&gt;Delegates can freely be passed around and copied since the data is only 2
pointers. Checking if one delegate corresponds to another can be easily
achieved.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;How can this implementation be used in real code? Say you have a class &lt;code&gt;A&lt;/code&gt; with
a function &lt;code&gt;foo&lt;/code&gt; that you want to pass to some other code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo called with x=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d==d: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;False&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d==d2: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;False&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First you of course need an object of &lt;code&gt;A&lt;/code&gt; (&lt;code&gt;a&lt;/code&gt;). Constructing the delegate
involves a call to the &lt;code&gt;from_function&lt;/code&gt; function that takes the type of &lt;code&gt;a&lt;/code&gt; and
the member function pointer as template arguments plus &lt;code&gt;a&lt;/code&gt; as a normal argument.
Then the delegate is ready to be passed around and used.&lt;/p&gt;

&lt;h2 id=&quot;a-more-generic-version&quot;&gt;A more Generic Version&lt;/h2&gt;

&lt;p&gt;Our first implementation has one severe drawback: It only works for a very
special function signature for the delegate function.&lt;br /&gt;
What we would like to have is a delegate for all possible combinations of return
values and argument types.&lt;/p&gt;

&lt;h3 id=&quot;parameter-for-return-type-and-argument&quot;&gt;Parameter for Return Type and Argument&lt;/h3&gt;

&lt;p&gt;As a first step, let’s make the &lt;code&gt;Delegate&lt;/code&gt; class a template so that we can vary
the return type and one parameter type.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage-1&quot;&gt;Usage&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IntDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;calling delegate with return value: d(42)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is a little more flexible, we are still not at our goal for a truly generic delegate implementation.&lt;/p&gt;

&lt;h2 id=&quot;meet-variadic-templates&quot;&gt;Meet Variadic Templates&lt;/h2&gt;

&lt;p&gt;Variadic templates solve a long standing problem in C++ when working with templates. They finally allow the user to define template-classes and template-functions that can work with an arbitrarily long list of template arguments. Previously you had to write or pre-generate template specializations for multiple arguments, s.th. that for example needed to be done excessively in template-heavy boost libraries. Using variadic templates things can now be written much more smoothly.&lt;br /&gt;
This new feature shows up in form of &lt;em&gt;parameter packs&lt;/em&gt; in your template definitions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;Ts&lt;/code&gt; is a synonym for a &lt;em&gt;list of types&lt;/em&gt; (not a single type!) and &lt;code&gt;vs&lt;/code&gt; stands for a &lt;em&gt;list of values&lt;/em&gt;. To work with them you can re-expand those lists in your code.&lt;/p&gt;

&lt;h3 id=&quot;expansions&quot;&gt;Expansions&lt;/h3&gt;

&lt;p&gt;To help to understand what parameter packs get expanded to, it’s easiest to look at the following expansions that the compiler will take care of:&lt;/p&gt;

&lt;table class=&quot;table borderless&quot;&gt;
  &lt;tbody&gt;
    &lt;tr class=&quot;odd&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ts...&lt;/code&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;→&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;T&lt;sub&gt;1&lt;/sub&gt;,…T&lt;sub&gt;n&lt;/sub&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;even&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;code&gt;x&amp;lt;Ts, Y&amp;gt;::z...&lt;/code&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;→&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;x&amp;lt;T&lt;sub&gt;1&lt;/sub&gt;, Y&amp;gt;::z,… x&amp;lt;T&lt;sub&gt;n&lt;/sub&gt;, Y&amp;gt;::z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;odd&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;code&gt;x&amp;lt;Ts&amp;amp;, Us&amp;gt;...&lt;/code&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;→&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;x&amp;lt;T&lt;sub&gt;1&lt;/sub&gt;&amp;amp;, U&lt;sub&gt;1&lt;/sub&gt;&amp;gt;,… x&amp;lt;T&lt;sub&gt;n&lt;/sub&gt;&amp;amp;, U&lt;sub&gt;n&lt;/sub&gt;&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&quot;even&quot;&gt;
      &lt;td align=&quot;left&quot;&gt;&lt;code&gt;foo(vs)...&lt;/code&gt;&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;→&lt;/td&gt;
      &lt;td align=&quot;left&quot;&gt;foo(v1),… foo(vn)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;...&lt;/code&gt; ellipsis makes the compiler look to its left side to figure out what
can be expanded. In the first case it’s just a list of types. More interesting
in the second case, here &lt;code&gt;Ts&lt;/code&gt; is expandable but not &lt;code&gt;Y&lt;/code&gt; so the whole expression
will be expanded for the &lt;code&gt;Ts&lt;/code&gt;.&lt;br /&gt;
When there is more than one possibility to expand, all possible matches will be
expanded together (T&lt;sub&gt;1&lt;/sub&gt; with U&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt; with
U&lt;sub&gt;2&lt;/sub&gt; and so on).&lt;br /&gt;
Expansion also works for lists of values when e.g. calling a function with every
element in a list.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://erdani.com/&quot;&gt;Andrei&lt;/a&gt; had a nice little example in &lt;a href=&quot;http://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Variadic-Templates-are-Funadic&quot;&gt;his talk at GoingNative 2012&lt;/a&gt; that shows
a simple function that makes use of variadic templates.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isOneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isOneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isOneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isOneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function takes a list of arguments (at least 2) and checks if the first
argument gets repeated somewhere.&lt;/p&gt;

&lt;h2 id=&quot;truly-generic-delegate&quot;&gt;Truly Generic Delegate&lt;/h2&gt;

&lt;p&gt;Now with the nice addition of variadic templates it’s possible to write a true
generic version for our delegate, i.e. a delegate that is both parameterized in
it’s return type and it’s argument types.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpCallbackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage-2&quot;&gt;Usage&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;delegate with return value: d(42)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;for d2: d2(42, 2, &amp;#39;a&amp;#39;)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we have Delegate available for all the function types we want to use on
our delegate objects. Ok, the syntax might be a little verbose but that can be
amended somewhat using a factory function for our delegates in combination with
a little C macro.&lt;/p&gt;

&lt;h3 id=&quot;syntactic-sugar-please&quot;&gt;Syntactic Sugar please!&lt;/h3&gt;

&lt;p&gt;Let’s see what we can do to make delegates a little more pleasing to the eye:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelegateMaker&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DelegateMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DelegateMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;makeDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelegateMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define DELEGATE(foo, thisPrt) (makeDelegate(foo).Bind&amp;lt;foo&amp;gt;(thisPrt))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puuhh…looks worse than it is since this is only library code that users of our
delegate implementation will never need to look at. The &lt;code&gt;DelegateMaker&lt;/code&gt; together
with the &lt;code&gt;makeDelegate&lt;/code&gt; function is needed to make use of C++’s template
argument deduction which unfortunately only works on template functions and not
class templates. But now we can easily have our cake and eat it, too.&lt;/p&gt;

&lt;h3 id=&quot;usage-3&quot;&gt;Usage&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadSimple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;no params whatsoever&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wanna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I=%d, wanna=%c, go=%f, crazy=%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wanna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELEGATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELEGATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELEGATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELEGATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deadSimple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d(42)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d2(42, 2, &amp;#39;a&amp;#39;)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sheeeet!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go. An extremely fast delegate implementation that looks quite usable
to my eyes thanks to C++11’s variadic templates.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are interested, the source-code is available on &lt;a href=&quot;https://github.com/marcmo/delegates&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Jan 2014 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/C++-delegates-on-steroids</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/C++-delegates-on-steroids</guid>
        
        <category>C++</category>
        
        <category>templates</category>
        
        <category>lua</category>
        
        
      </item>
    
      <item>
        <title>Top 10 Unix Command Line Utilities 2013</title>
        <description>&lt;div class=&quot;table-of-contents&quot;&gt;


&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#awk&quot;&gt;awk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ls&quot;&gt;ls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ack&quot;&gt;ack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rename&quot;&gt;rename&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redirects&quot;&gt;Redirects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subshells&quot;&gt;Subshells&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tee&quot;&gt;tee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zips-archives&quot;&gt;Zips &amp;amp; Archives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#base-conversion&quot;&gt;Base Conversion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;For a long time I have used the bash on a daily basis. It has become such a trustworthy companion
that I virtually cannot do any work on a windows box anymore. But even using bash every day I
regularly come across ways of solving particular tasks that I did not really know about.&lt;br /&gt;
To keep track of such solutions, I try to keep my cheat-sheets up to date with what I found and
learned during the year. In tradition with &lt;a href=&quot;/posts/bash-features-of-the-year&quot;&gt;2011&lt;/a&gt; and &lt;a href=&quot;/posts/Top-10-Unix-Command-Line-Utilities-2012&quot;&gt;2012&lt;/a&gt; I again took a look at the git-log and
compiled 10 of the things that I learned or used a lot in the shell.&lt;br /&gt;
This year is different though since I decided to go into a little more detail about some of the
items where I felt it was instructional. I also included a small table of contents, mainly ‘cause I
tend to come back to those tips myself a lot and wanted a quicker way to find the item in question.&lt;/p&gt;

&lt;h2 id=&quot;awk&quot;&gt;1&amp;gt; awk&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;awk&lt;/code&gt; is probably the most powerful unix tool I encountered so far. It’s actually a whole
programming language, not just a tool. I tend to stay clear of the more complicated uses but for
some small output processing it’s just invaluable.&lt;br /&gt;
The basic structure of &lt;code&gt;awk&lt;/code&gt; statements is always the same, first you list a pattern to match,
second the action you want &lt;code&gt;awk&lt;/code&gt; to perform:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;awk &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;condition&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;action&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code&gt;action&lt;/code&gt; it is possible to refer to different parts of the current input record. If &lt;code&gt;awk&lt;/code&gt; is
fed some lines of text, it will process each line that satisfy the condition and dissect it into
parts. That is often helpful if only some parts of the output are wanted.  &lt;/p&gt;

&lt;h3 id=&quot;dependent-include-files&quot;&gt;Dependent include files&lt;/h3&gt;

&lt;p&gt;One of the situations where this was just the right tool for me was trying to find recursively all
dependent header files of a C-file. The compiler (&lt;em&gt;clang&lt;/em&gt; in my case) can greatly help here since it
has to know about the headers it needs. And it comes with an option to list this information:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;-H                      Show header includes and nesting depth&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I found this option is less picky than &lt;code&gt;-M&lt;/code&gt;. Using it, the information about included header files
will be displayed along with lots of other stuff that is unwanted in this case. &lt;code&gt;awk&lt;/code&gt; can be used to
filter the results down to the relevant lines and further extract the file names from those lines.&lt;br /&gt;
In the example below&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all error messages are filtered out (&lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt;, see &lt;a href=&quot;#redirects&quot;&gt;redirects section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;clang is used to list the recursive include tree (&lt;code&gt;cpp -H [include-paths] [C/C++-file]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;awk&lt;/code&gt; first filters all lines with header information (&lt;code&gt;/^#.*\.h\&quot;$/&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;and extracts the header name (&lt;code&gt;{print $3}&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tr&lt;/code&gt; is used to get rid of the &lt;code&gt;&quot;&quot;&lt;/code&gt; quotation-marks&lt;/li&gt;
  &lt;li&gt;finally all duplicates are removed by using &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;uniq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;kernel&lt;/span&gt;(master) &amp;gt; 2&amp;gt;/dev/null cpp -H -Iinclude crypto/fcrypt.c \
  | &lt;span style=&quot;background-color:#C1DDFF; color:black&quot;&gt;awk &#39;/^#.*\.h\&quot;$/ {print $3}&#39;&lt;/span&gt; | tr -d &#39;&quot;&quot;&#39; | sort | uniq
include/asm-generic/atomic-long.h
include/linux/atomic.h
include/linux/bitmap.h
include/linux/compiler.h
include/linux/completion.h
include/linux/cpumask.h
include/linux/crypto.h
...
&lt;/pre&gt;

&lt;h2 id=&quot;ls&quot;&gt;2&amp;gt; ls&lt;/h2&gt;

&lt;p&gt;Plain old &lt;code&gt;ls&lt;/code&gt; is probably my most used command. But &lt;code&gt;ls&lt;/code&gt; can do some nice tricks, too. Using the
&lt;code&gt;-S&lt;/code&gt; flag, &lt;code&gt;ls&lt;/code&gt; will sort the files by size. Combined with &lt;code&gt;-h&lt;/code&gt; it produces a very readable result:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;kernel&lt;/span&gt;(master) &amp;gt; ls -lSh | head -5
total 6352
-rw-r--r--  1 muellero  staff   236K Jun  6  2013 sched.c
-rw-r--r--  1 muellero  staff   139K Jun  6  2013 cgroup.c
-rw-r--r--  1 muellero  staff   130K Jun  6  2013 sched_fair.c
-rw-r--r--  1 muellero  staff   104K Jun  6  2013 workqueue.c
&lt;/pre&gt;

&lt;p&gt;Often very helpful is also to only include the most recent files. &lt;code&gt;-t&lt;/code&gt; will sort files by the date they were modified the last time.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -l -t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a directory with lots of files it’s sometimes practical to only list the directories. The &lt;code&gt;-d&lt;/code&gt;
option makes sure directories are listed as plain files and not searched recursively. Since all
directories end in &lt;code&gt;/&lt;/code&gt; this can be used to list only those.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -d */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course the opposite is also achievable, this one only lists the files. For this you can use &lt;code&gt;-p&lt;/code&gt;
which will write a slash (“/”) after each filename if that file is a directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -p &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ack -v /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one can nicely be combined with some &lt;code&gt;awk&lt;/code&gt; magic to count the file-types by extensions in a
directory:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;kernel&lt;/span&gt;(master) &amp;gt; ls -p | ack -v / | awk -F . &#39;{print $NF}&#39; | sort | uniq -c
   1 Makefile
 112 c
   1 freezer
  17 h
  ...
&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;awk&lt;/code&gt; was used to split at the “.” and print the last part (which is the extension).&lt;/p&gt;

&lt;h2 id=&quot;find&quot;&gt;3&amp;gt; find&lt;/h2&gt;

&lt;p&gt;Again a classic. After &lt;code&gt;ls&lt;/code&gt; for sure an all-time favorite. Can also be combined with an action.&lt;br /&gt;
Here, &lt;code&gt;find&lt;/code&gt; first seeks out all symbolic links in the current directory and deletes them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find . -type l -delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This only works for reasonably recent versions of &lt;code&gt;find&lt;/code&gt;. For older versions the following syntax should works as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find . -type l -exec rm &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ack&quot;&gt;4&amp;gt; ack&lt;/h2&gt;

&lt;p&gt;Ever since I found &lt;a href=&quot;http://beyondgrep.com/&quot;&gt;ack-grep&lt;/a&gt; I most of the time us it as a replacement for &lt;code&gt;grep&lt;/code&gt;. The developers
claim that it is &lt;em&gt;”…designed as a replacement for 99% of the uses of grep…”&lt;/em&gt; but to be honest, I
never found that a case where it failed me. Out of the box it just works and produces beautifully
highlighted results. But more importantly, it adds some nice features that I really grew to like.&lt;br /&gt;
And it’s quite fast. For most of my usecases faster then &lt;code&gt;grep&lt;/code&gt; since it only searches whitelisted
files by default. &lt;a href=&quot;http://codeseekah.com/2012/03/11/ack-grep-vs-grep/&quot;&gt;This guy here&lt;/a&gt; has put together a pretty good comparison with some performance
tests.  &lt;/p&gt;

&lt;h3 id=&quot;limit-to-certain-file-types&quot;&gt;Limit to certain File-Types&lt;/h3&gt;

&lt;p&gt;One very handy feature is the ability to narrow the search down to certain file types. By default
&lt;code&gt;ack&lt;/code&gt; already knows about countless file types (can be checked with &lt;code&gt;ack --help=types&lt;/code&gt;). Limiting
the searched files dramatically reduces the search time.&lt;br /&gt;
Here is an example of searching all C and C++ source files for a pattern and include 2 lines of
context before (&lt;code&gt;-B&lt;/code&gt;) and after (&lt;code&gt;-A&lt;/code&gt;) the found match.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;kernel&lt;/span&gt;(master) &amp;gt; ack --type=cpp probability -B 2 -A 2
&lt;span style=&quot;color:#60FA67&quot;&gt;drivers/net/ethernet/sun/cassini.h&lt;/span&gt;
&lt;span style=&quot;color:#FFFC67&quot;&gt;875&lt;/span&gt;-
&lt;span style=&quot;color:#FFFC67&quot;&gt;876&lt;/span&gt;-/* probabilities for random early drop (RED) thresholds on a FIFO threshold
&lt;span style=&quot;color:#FFFC67&quot;&gt;877&lt;/span&gt;: * basis. &lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;probability&lt;/span&gt; should increase when the FIFO level increases. control
&lt;span style=&quot;color:#FFFC67&quot;&gt;878&lt;/span&gt;: * packets are never dropped and not counted in stats. &lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;probability&lt;/span&gt; programmed
&lt;span style=&quot;color:#FFFC67&quot;&gt;879&lt;/span&gt;- * on a 12.5% granularity. e.g., 0x1 = 1/8 packets dropped.
&lt;span style=&quot;color:#FFFC67&quot;&gt;880&lt;/span&gt;- * DEFAULT: 0x00000000
&lt;/pre&gt;

&lt;h3 id=&quot;highlighter&quot;&gt;Highlighter&lt;/h3&gt;

&lt;p&gt;A lesser common usecase for &lt;code&gt;ack&lt;/code&gt; is the &lt;em&gt;passthru&lt;/em&gt; mode. In this mode &lt;code&gt;ack&lt;/code&gt; does not limit the
output to the matching positions but spills out the whole input, highlighting the search-matches in
the process. This practically makes &lt;code&gt;ack&lt;/code&gt; a formidable highlighting tool.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;kernel&lt;/span&gt;(master) &amp;gt; ls | ack -i mutex --passthru
...
lockdep_internals.h
lockdep_proc.c
lockdep_states.h
module.c
&lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;mutex&lt;/span&gt;-debug.c
&lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;mutex&lt;/span&gt;-debug.h
&lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;mutex&lt;/span&gt;.c
&lt;span style=&quot;background-color:#FFFC67; color:black&quot;&gt;mutex&lt;/span&gt;.h
notifier.c
nsproxy.c
...
&lt;/pre&gt;

&lt;h2 id=&quot;rename&quot;&gt;5&amp;gt; rename&lt;/h2&gt;

&lt;p&gt;Mass renaming in the shell is usually done with some form of loop, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in *.zip &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; mv &lt;span class=&quot;s2&quot;&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${i%.zip}`date +%Y`.zip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here a substitution operation is used to cut of the extension part which is then replaced with the
year + the extension. The same thing using &lt;code&gt;rename&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rename -X -a &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +%Y&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; *.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is using the &lt;code&gt;-a&lt;/code&gt; transform that appends some string to each filename.&lt;/p&gt;

&lt;h3 id=&quot;rename-part-of-filename&quot;&gt;rename part of filename&lt;/h3&gt;

&lt;p&gt;Using for loops can become complicated pretty soon, and for those cases &lt;code&gt;rename&lt;/code&gt; is a pretty good
alternative. Say when you have a bunch of files that contain the string “Aug” in their name but want
to replace it with “08”. The by far easiest way I have found to accomplish stuff like this is to use
the &lt;code&gt;rename&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rename &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/Aug/08/&amp;#39;&lt;/span&gt; *.*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rename&lt;/code&gt; takes &lt;em&gt;modification rules&lt;/em&gt; and applies them to the files that match a pattern (if given,
otherwise it expects a list of filenames on &lt;code&gt;stdin&lt;/code&gt;). The beauty of this utility is that it comes
with support for lot’s of common cases out of the box. For example, if files contain spaces or other
unwanted characters, there is the option to sanitize them using &lt;code&gt;-z&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; ls
a b  c_.tif
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; rename -n -z *
&#39;a b  c_.tif&#39; would be renamed to &#39;a_b_c_.tif&#39;
&lt;/pre&gt;

&lt;p&gt;Here the option &lt;code&gt;-n&lt;/code&gt; is applied as well, resulting in a &lt;em&gt;dry run&lt;/em&gt; without any actual modifications.
The &lt;code&gt;-z&lt;/code&gt; option will replace all sequences of whitespaces or control characters with a single “_”,
replace every shell meta-character with “_” and remove spaces and underscores from left and right
end.&lt;br /&gt;
The result is almost as desired… just the trailing “_” is still annoying. The sanitize
command did not remove it. That’s because the file extension is the last part of the filename. But
I’d really like to sanitize the name without the extension. Turns out &lt;code&gt;rename&lt;/code&gt; has a very handy
feature that allows to save and remove the last extension before any modifications and slab it on
again afterwards.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; rename -n -X -z *
&#39;a b  c_.tif&#39; would be renamed to &#39;a_b_c.tif&#39;
&lt;/pre&gt;

&lt;h3 id=&quot;put-files-in-folders-according-to-their-endings&quot;&gt;put files in folders according to their endings&lt;/h3&gt;

&lt;p&gt;This is something I use more and more often.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rename -p -X -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$_ = &amp;quot;$EXT/$_&amp;quot; if @EXT&amp;#39;&lt;/span&gt; *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will move all files into folders that have the same name as their extension. The &lt;code&gt;-p&lt;/code&gt; is needed
to make sure directories are created if needed. The &lt;code&gt;-X&lt;/code&gt; chopes of the extension and saves it into
the &lt;code&gt;$EXT&lt;/code&gt; variable. &lt;code&gt;-e&lt;/code&gt; will evaluate the following expression, in this case evaluate to a path
consisting of the stored extension together with the filename if an extension exists.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;p&lt;/code&gt;    → creates directories if needed&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;X&lt;/code&gt;    → chop of extension and append after the operation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;e&lt;/code&gt;    → evaluate perl expression&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$EXT&lt;/code&gt; → A string containing the accumulated extensions saved by “-X” switches, without a leading dot&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@EXT&lt;/code&gt; → An array containing the accumulated extensions saved by “-X” switches, from right to left, without any dots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;rename&lt;/code&gt; is not available on all systems by default and you might need to install it, e.g.
&lt;code&gt;brew install rename&lt;/code&gt; on OSX.&lt;/p&gt;

&lt;h2 id=&quot;redirects&quot;&gt;6&amp;gt; Redirects&lt;/h2&gt;

&lt;p&gt;For some shell commands I always have to consult my notes or google. Mostly that is ‘cause I haven’t
taken the time to really understand the underlying concept. Redirects are a perfect example: simple
enough to just use them so most people don’t worry about their mechanics.&lt;/p&gt;

&lt;div class=&quot;jumbotron&quot;&gt;


&lt;h3 id=&quot;everything-in-unix-is-a-file&quot;&gt;Everything in UNIX is a file&lt;/h3&gt;

&lt;p&gt;Data streams and peripherals are treated as &lt;em&gt;files&lt;/em&gt;, just like ordinary files. Each gets a
file-descriptor assigned that can then be used to access the stream.  A &lt;em&gt;file-descriptor&lt;/em&gt; is an
integer associated with a network connection, a pipe or a real file, amongst other things. When
executing a command, it will mainly work with 3 different file-descriptors/files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 ≘ stdin&lt;/li&gt;
  &lt;li&gt;1 ≘ stdout&lt;/li&gt;
  &lt;li&gt;2 ≘ stderr&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;h3 id=&quot;redirecting-output&quot;&gt;Redirecting Output&lt;/h3&gt;

&lt;p&gt;For redirecting output you use “&lt;strong&gt;&amp;gt;&lt;/strong&gt;” (the output redirection operator).
Probably my most widely used redirect is to write to a file instead of &lt;code&gt;stdout&lt;/code&gt;. The example will
write to a .gitignore file, possibly creating it in the process if it doesn’t already exist.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;temp &amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Slightly more useful is often to use the same redirect but append to a file rather than to overwrite it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;temp &amp;gt;&amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Such basic redirects are valid for the whole line and are a short form for specifying the target
file descriptor explicitly (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ≡ &lt;code&gt;1&amp;gt;&amp;gt;&lt;/code&gt;). They can also appear before the command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1&amp;gt;&amp;gt; .gitignore &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;temp &lt;span class=&quot;c&quot;&gt;# redirect stdout and append to .gitignore&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/Stdout2file.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course redirects are not limited to redirecting to a file. Have you ever tried to redirect the
output of a command to a file but there were still some messages displayed on the terminal that did
not get redirected? This is a quite common case where &lt;code&gt;stderr&lt;/code&gt; needs to be redirected to &lt;code&gt;stdout&lt;/code&gt; so
that all error messages are sent to &lt;code&gt;stdout&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/RedirectStderr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&amp;amp;&lt;/strong&gt; is similar to the address operator in C/C++ and is used to name a file-descriptor. So
&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; tells the shell that we want file-descriptor &lt;strong&gt;(2)&lt;/strong&gt; (&lt;code&gt;stderr&lt;/code&gt;) to point to the same file as
file-descriptor &lt;strong&gt;(1)&lt;/strong&gt; (&lt;code&gt;stdout&lt;/code&gt;). This works with any file-descriptor, not just &lt;strong&gt;(2)&lt;/strong&gt; and
&lt;strong&gt;(1)&lt;/strong&gt;: &lt;code&gt;x&amp;gt;&amp;amp;y&lt;/code&gt; will point file-descriptor x to where y is pointing to.&lt;br /&gt;
Using this knowledge, we can swap where 2 file-descritors point with a technique similar to pointer swapping in C:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand 3&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; 1&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; 3&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A temporary file-descriptor &lt;strong&gt;(3)&lt;/strong&gt; is used as a temp. It will first capture the file pointed by
&lt;code&gt;stdout&lt;/code&gt; which is then be redirected to where &lt;code&gt;stderr&lt;/code&gt; points to. As a last step &lt;code&gt;stderr&lt;/code&gt; is now
pointed to where &lt;code&gt;stdout&lt;/code&gt; pointed originally and &lt;strong&gt;(3)&lt;/strong&gt; is closed as it no longer is needed.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/redirect_swap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;order-of-redirects&quot;&gt;Order of Redirects&lt;/h3&gt;

&lt;p&gt;A fact that often causes considerable confusion is that the order of the redirects matters. Actually
not to hard to remember once you picture the file-descriptors as pointers to files. If we for
example try to capture stdout and stderr in a file, one might be tempted to use something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &amp;gt;&amp;gt; my_log_file.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/WrongRedirect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this does not work as expected. Here, &lt;code&gt;stderr&lt;/code&gt; is first pointed at the same file as &lt;code&gt;stdout&lt;/code&gt;
(i.e. the terminal). Then we redirect &lt;code&gt;stdout&lt;/code&gt; away from the terminal to a file.&lt;br /&gt;
If both &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; should be captured in a file, we need to reverse the order of the redirects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand &amp;gt;&amp;gt;my_log_file.txt 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# capture everything in a file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/Stdout2file2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Armed with an understanding how redirects work, it’s now quite simple to understand the following example:&lt;/p&gt;

&lt;h3 id=&quot;only-use-stderr-output&quot;&gt;Only use stderr output&lt;/h3&gt;

&lt;p&gt;Redirect &lt;code&gt;stderr&lt;/code&gt; to where &lt;code&gt;stdout&lt;/code&gt; points to and then &lt;code&gt;stdout&lt;/code&gt; to /dev/null (dump it). The output
can then further be processed, here we pipe it to grep for something.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &amp;gt;/dev/null &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/OnlyStderr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redirecting-input&quot;&gt;Redirecting Input&lt;/h3&gt;

&lt;p&gt;Similar to how we can modify &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;, &lt;code&gt;stdin&lt;/code&gt; can also be replaced as an input to a
program using the input redirection operator “&lt;strong&gt;&amp;lt;&lt;/strong&gt;”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand &amp;lt; inputFile &lt;span class=&quot;c&quot;&gt;# same as cat inputFile | myCommand&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Combining input and output redirection is also possible for one command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;myCommand &amp;lt; inputFile &amp;gt; outFile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;subshells&quot;&gt;7&amp;gt; Subshells&lt;/h2&gt;

&lt;p&gt;Quite often I want to download some file using &lt;code&gt;wget&lt;/code&gt; and put it into my download folder. At the
same time I don’t want to loose the context (current working directory).&lt;br /&gt;
One way to deal with this is to &lt;code&gt;cd&lt;/code&gt; into the download directory, issue the &lt;code&gt;wget&lt;/code&gt; command, and use
a quick &lt;code&gt;cd -&lt;/code&gt; to return from where you started. Lately my preferred way is to use a &lt;em&gt;subshell&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; (cd ~/downloads; wget http://www.example.com/abc.tar.gz)
&lt;/pre&gt;

&lt;p&gt;A subshell is a child process of the process the shell is running in with access to the environment
of it’s parent process. But any changes to the environment done in this child-process does not
propagate to the parent. Thus we can change the directory, set or unset environment variables and so
on.&lt;br /&gt;
Another nice example is to remove the &lt;code&gt;http_proxy&lt;/code&gt; from the environment when temporarily not needed:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; (unset http_proxy; wget http://www.example.com/abc.tar.gz)
&lt;/pre&gt;

&lt;h3 id=&quot;bonus-example&quot;&gt;Bonus Example&lt;/h3&gt;

&lt;p&gt;I just found another very nice usage of subshells on the discussion board of &lt;a href=&quot;http://vimcasts.org/episodes/comparing-buffers-with-vimdiff/&quot;&gt;vimcasts&lt;/a&gt;. Barton
Chittenden showed how to avoid the use of temporary files for using vimdiff using process
substitution in bash:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; vimdiff &amp;lt;(sort file1) &amp;lt;(sort file2)
&lt;/pre&gt;

&lt;h2 id=&quot;tee&quot;&gt;8&amp;gt; Tee&lt;/h2&gt;

&lt;p&gt;Sometimes there is more then one consumer for some command output. This is what &lt;code&gt;tee&lt;/code&gt; can be used
for. It takes as an input the output of some other command using &lt;code&gt;stdin&lt;/code&gt; and duplicates it, feeding
  the two streams to a file-descriptor and &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/unixtools2013/tee.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After taking a look at &lt;a href=&quot;#redirects&quot;&gt;redirects&lt;/a&gt; and &lt;a href=&quot;#subshells&quot;&gt;subshells&lt;/a&gt; here is a neat
&lt;a href=&quot;http://www.commandlinefu.com/commands/view/6334/use-tee-to-process-a-pipe-with-two-or-more-processes&quot;&gt;commandlinefu-example&lt;/a&gt; of how &lt;code&gt;tee&lt;/code&gt; can be used to split a pipe into multiple streams for one or
more subshells to work it.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; echo &quot;tee can split a pipe in two&quot; | &lt;span style=&quot;background-color:#C1DDFF; color:black&quot;&gt;tee &amp;gt;(rev) &amp;gt;(tr &#39; &#39; &#39;_&#39;)&lt;/span&gt;
tee can split a pipe in two
owt ni epip a tilps nac eet
tee_can_split_a_pipe_in_two
&lt;/pre&gt;

&lt;h3 id=&quot;copy-directory-multiple-time&quot;&gt;Copy directory multiple time&lt;/h3&gt;

&lt;p&gt;To copy a directory containing everything without temporary files and preserving ownership,
permissions, and timestamps is often done with &lt;code&gt;tar&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cf - . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;targetDir &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar xfp -&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;tar&lt;/code&gt; will create an archive containing everything in the current directory. The “-“ is used to
write to &lt;code&gt;stdout&lt;/code&gt; instead of a file. The output is then piped into a &lt;a href=&quot;#subshells&quot;&gt;subshells&lt;/a&gt; to
change into the target directory and extract the everything.&lt;br /&gt;
Copying everything twice can be accomplished using &lt;code&gt;tee&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cf - . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tee &amp;gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;targetDir &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar xfp -&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;targetDir2 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar xfp -&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code&gt;tee&lt;/code&gt; will duplicate &lt;code&gt;stdin&lt;/code&gt; and feed it to a process substitution and to &lt;code&gt;stdout&lt;/code&gt;, which in turn is then piped to the subshell.&lt;/p&gt;

&lt;h2 id=&quot;zips--archives&quot;&gt;9&amp;gt; Zips &amp;amp; Archives&lt;/h2&gt;

&lt;p&gt;Compressed archives are a brilliant way to exchange files… everything is bundled together, in
general takes up way less space and can even be password protected. Inspecting or unpacking them
usually involves creating temporary directories or files. But there are some handy ways to acoid
such intermediate products.&lt;/p&gt;

&lt;h3 id=&quot;view-zipfiles&quot;&gt;view zipfiles&lt;/h3&gt;

&lt;p&gt;Often you just need to peek inside without actually extracting anything. &lt;code&gt;zipinfo&lt;/code&gt; is a nice little utility that does just that.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; zipinfo tmp.zip
Archive:  tmp.zip   20400 bytes   2 files
-rw-r--r--  3.0 unx    19960 bx defN 14-Nov-12 11:05 colordiff-1.0.13.tar.gz
-rw-r--r--  3.0 unx       72 bx stor 14-Nov-12 11:06 colordiff-1.0.13.tar.gz.sig
2 files, 20032 bytes uncompressed, 20022 bytes compressed:  0.0%
&lt;/pre&gt;

&lt;p&gt;But of course unzip can also perform the task. The &lt;code&gt;-t&lt;/code&gt; option tests an archive file, listing it’s content in the process:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; unzip -t tmp.zip
Archive:  tmp.zip
    testing: colordiff-1.0.13.tar.gz   OK
    testing: colordiff-1.0.13.tar.gz.sig   OK
No errors detected in compressed data of tmp.zip.
&lt;/pre&gt;

&lt;p&gt;A third and my prefered option is to use &lt;code&gt;unzip&lt;/code&gt; with it’s &lt;code&gt;-l&lt;/code&gt; option (lists the content of the archive file).&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; unzip -l tmp.zip
Archive:  tmp.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
    19960  11-14-12 11:05   colordiff-1.0.13.tar.gz
       72  11-14-12 11:06   colordiff-1.0.13.tar.gz.sig
 --------                   -------
    20032                   2 files
&lt;/pre&gt;

&lt;h3 id=&quot;unpacking&quot;&gt;Unpacking&lt;/h3&gt;

&lt;p&gt;Even upacking does not necessarily involve spilling the zipped files out to disk. The content of a
zip-archive can be extracted and fed to a pipe so that it becomes usable by another process.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; echo &quot;text me&quot; &amp;gt; test.txt
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; zip storage test.txt; rm test.txt
  adding: test.txt (stored 0%)
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; ls
storage.zip
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; unzip -p storage.zip | rev
em txet
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; ls
storage.zip
&lt;/pre&gt;

&lt;p&gt;Here I created a sample zip archive and extracted it to feed the content to &lt;code&gt;rev&lt;/code&gt; without creating any files in the process.&lt;/p&gt;

&lt;h3 id=&quot;inspecting-tar-archives&quot;&gt;Inspecting tar Archives&lt;/h3&gt;

&lt;p&gt;Most of the archives dealt with under Linux are compressed tar files, so here is how you list their content.&lt;br /&gt;
First, for a gzipped file (ending in &lt;code&gt;*.tar.gz&lt;/code&gt; or &lt;code&gt;*.tgz&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar -ztvf file.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally for the &lt;code&gt;bzip2&lt;/code&gt; formats:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar -jtvf file.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;t&lt;/code&gt; → list contents&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;v&lt;/code&gt; → verbose, display detailed information&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;z&lt;/code&gt; → filter through gzip (for *.gz fils)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;j&lt;/code&gt; → filter through bzip2 (for *.bz2 fils)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f&lt;/code&gt; → filename&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;base-conversion&quot;&gt;10&amp;gt; Base Conversion&lt;/h2&gt;

&lt;p&gt;Even though &lt;code&gt;printf&lt;/code&gt; in C/C++ offers great many pitfalls, I still like to use it often despite
having access to C++ iostreams. Bash also supports a form of &lt;code&gt;printf&lt;/code&gt; that can easily be used to do
some basic number conversions.&lt;/p&gt;

&lt;h3 id=&quot;convert-decimal-to-hexoctal&quot;&gt;convert decimal to hex/octal&lt;/h3&gt;

&lt;p&gt;Just as in C, the bash &lt;code&gt;printf&lt;/code&gt; can easily print numerical values in different formats:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; printf &quot;%#x\n&quot; 100
0x64
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; printf &quot;%#o\n&quot; 100
0144
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;#&lt;/code&gt;-character is the &lt;em&gt;alternative format modifier&lt;/em&gt; and is responsible for prepending the “0x”
for hexadecimal values and a leading zero for octal values.&lt;/p&gt;

&lt;h3 id=&quot;convert-hex-to-decimal&quot;&gt;convert hex to decimal&lt;/h3&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; printf &quot;%d\n&quot; 0x64
100
&lt;/pre&gt;

&lt;h3 id=&quot;print-a-conversion-table-from-decimal-to-hex&quot;&gt;Print a conversion table from decimal to hex&lt;/h3&gt;

&lt;p&gt;A nice example I found in the &lt;a href=&quot;http://wiki.bash-hackers.org/commands/builtin/printf&quot;&gt;Bash Hackers Wiki&lt;/a&gt; is to print out a conversion table:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; for ((x=0; x &amp;lt;= 127; x++)); do printf &#39;%3d | 0x%02x\n&#39; &quot;$x&quot; &quot;$x&quot;; done
  0 | 0x00
  1 | 0x01
  2 | 0x02
  3 | 0x03
  ...
&lt;/pre&gt;

&lt;h2 id=&quot;done-for-2013&quot;&gt;Done for 2013&lt;/h2&gt;

&lt;p&gt;Ok, this was my bash feature list of the year. By no means am I an expert for the features
described. If you see something that is incorrect or might otherwise be completed more elegantly I’d
be glad to hear it!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo: Todd Quackenbush&lt;/small&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 31 Dec 2013 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/top-10-unix-command-line-utilities-2013</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/top-10-unix-command-line-utilities-2013</guid>
        
        <category>unix</category>
        
        <category>bash</category>
        
        
      </item>
    
      <item>
        <title>The Incredible Brew</title>
        <description>&lt;p&gt;When Apple started shipping the first iBooks including Mac OS X back in 2001 I was hooked. A
beautiful and well design user interface sitting on top of a developer friendly operation system.
More importantly: a &lt;em&gt;unix&lt;/em&gt; based OS where most of the unix tools you know and love are available.
But porting some linux based utility to Mac Os was now possible albeit quite hairy in some cases.
Dealing with the dependencies and taking care that versions are compatible gets ungainly pretty
quick.&lt;/p&gt;

&lt;h2 id=&quot;package-management-systems&quot;&gt;Package Management Systems&lt;/h2&gt;

&lt;p&gt;And of course there where others that stepped up and created whole package management systems:
&lt;a href=&quot;http://fink.thetis.ig42.org&quot;&gt;fink&lt;/a&gt; and &lt;a href=&quot;http://www.macports.org&quot;&gt;MacPorts&lt;/a&gt; (formerly DarwinPorts) where the first contenders. While this ameliorated the
whole situation considerably I still couldn’t quite warm up to those solutions. Both systems decided
it was best to not rely on any library that come with OS X but rather include everything in the
dependency-tree. That for sure does guarantee the best possible compatibility but it also means
build times will increase dramatically. MacPorts was long my favorite solution and over time I
assembled quite a fair share of compiled libraries. So much that you will avoid rebuilding at all
costs. If for some reason your dependencies are messed up and you’d like to restart…you won’t do
it.&lt;/p&gt;

&lt;h2 id=&quot;i-classfa-fa-flaski-homebrew-to-the-rescue&quot;&gt;&lt;i class=&quot;fa fa-flask&quot;&gt;&lt;/i&gt; Homebrew to the Rescue&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; takes a radically different approach: reuse existing Mac OS libraries and stay as
lightweight as possible. Everything about homebrew has a modern feel to it, from the homepage over
the way they keep all package information in a git-repository to the super easy formula (that’s what
they call their packages) definitions in ruby. It has a &lt;em&gt;very&lt;/em&gt; active user community and since
development is done on &lt;a href=&quot;http://github.com/mxcl/homebrew&quot;&gt;github&lt;/a&gt;, it’s quite easy to follow along and participate.&lt;br /&gt;
The usual stuff works as expected:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;brew update&lt;/code&gt; – update the formulae and Homebrew itself&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;brew outdated&lt;/code&gt; – now find out what is outdated&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;brew upgrade&lt;/code&gt; – Upgrade everything&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;brew upgrade $FORMULA&lt;/code&gt; – upgrade a specific formula&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;brew search /.*tk$/&lt;/code&gt; – search for available formula&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;brew info $FORMULA&lt;/code&gt; – provides a little more info about a formula&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; brew info aubio
    aubio: stable 0.3.2
    http://aubio.org/
    Not installed
    From: https://github.com/mxcl/homebrew/commits/master/Library/Formula/aubio.rb
    ==&amp;gt; Dependencies
    Build: pkg-config ✔, libtool ✔, swig ✘
    Required: fftw ✘, libsamplerate ✘, libsndfile ✘
    ...
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;search&lt;/code&gt; command can be used with regular expressions if the search term is surrounded with
slashes. A lesser known brew way to search for packages/formulae is to use &lt;code&gt;brew server&lt;/code&gt;. This
requires that &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;sinatra&lt;/a&gt; is available on the system and provides a website for the search.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/brew/homebrew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course you can always look up a package online as e.g. on &lt;a href=&quot;http://braumeister.org/&quot;&gt;braumeister&lt;/a&gt;. And if you need a
package that is not yet part of homebrew, it can easily be created. All it takes is to locate the
sources on the web and call &lt;code&gt;brew create&lt;/code&gt; with this link. homebrew will create a basic formula (== a
ruby script) that you can either just use or tweak manually of some special configure options are
needed. Since all formulae are kept in a git repository, it’s no problem to create your own packages
and still keep up to date with homebrew.  In fact, it’s so easy to modify a formula and &lt;a href=&quot;https://github.com/mxcl/homebrew/wiki/Formula-Cookbook#commit&quot;&gt;have it
added to the official&lt;/a&gt; repository that a lot of people are contributing to keep everything up to
date and grow the pool of available formulae constantly.&lt;/p&gt;

&lt;h2 id=&quot;warm-and-fuzzy&quot;&gt;Warm and Fuzzy&lt;/h2&gt;

&lt;p&gt;Good package managing systems have one area that is crucial in the long run: help to maintain a tidy
system. An area where brew really shines is dependency tracking. To find out if it’s gonna be a
quick install or quite a beast just take a look at the dependencies a formula has:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; brew deps cairo --tree
cairo
|- xz
|- pkg-config
|- freetype
|  |- libpng
|- fontconfig
|  |- pkg-config
|  |- freetype
|  |  |- libpng
...
&lt;/pre&gt;

&lt;p&gt;To maintain a sleek and tidy brew installation you can easily get rid of installed formulae. Here
it’s quite handy to do a reverse dependency lookup before:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; brew uses --recursive readline
abcl			geocouch		...
abook			ginac			...
...
&lt;/pre&gt;

&lt;p&gt;Once you decide what to get rid of, it just takes a &lt;code&gt;brew uninstall&lt;/code&gt; or a &lt;code&gt;brew rm&lt;/code&gt;. To make sure
nothing unimportant remains in your system, &lt;code&gt;brew prune&lt;/code&gt; will remove dead symlinks and &lt;code&gt;brew cleanup
-s&lt;/code&gt; will remove older versions and all downloads.&lt;br /&gt;
Brew also comes with some extremely useful checks. The &lt;code&gt;brew doctor&lt;/code&gt; makes sure you are in good shape and gives you good advice.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; brew doctor
Warning: Your XQuartz (2.7.4) is outdated
Please install XQuartz 2.7.5:
  https://xquartz.macosforge.org

Warning: Some installed formula are missing dependencies.
You should `brew install` the missing dependencies:

    brew install libffi

Run `brew missing` for more details.
...
&lt;/pre&gt;

&lt;p&gt;It tremendously helps to clean up and allows you to keep your peace of conscience. And &lt;code&gt;brew
missing&lt;/code&gt; of course shows you all formulae you still need to install.&lt;/p&gt;

&lt;h2 id=&quot;absolutely-happy&quot;&gt;Absolutely Happy&lt;/h2&gt;

&lt;p&gt;When I found out about brew a couple of years back, I was thrilled by it’s simplicity and the basic
concepts behind brew. Today after having used brew on multiple OS versions and machines, brew is one
of the first things to install. So far it never failed me and watching brew install a formula
including all necessary dependencies is almost a calming experience. Looking forward to a lot of
future installs!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/brew/cheers.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;image: &lt;cite&gt;Cheers&lt;/cite&gt; designed by &lt;a href=&quot;http://thenounproject.com/RyanBeck&quot;&gt;Ryan Beck&lt;/a&gt;, both from the &lt;a href=&quot;http://creativecommons.org/publicdomain/zero/1.0/deed.en&quot;&gt;Noun Project&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Dec 2013 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/The-Incredible-Brew</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/The-Incredible-Brew</guid>
        
        <category>unix</category>
        
        <category>osx</category>
        
        <category>tool</category>
        
        <category>git</category>
        
        <category>ruby</category>
        
        <category>bash</category>
        
        
      </item>
    
      <item>
        <title>Simple Networking</title>
        <description>&lt;p&gt;Last Friday a &lt;a href=&quot;http://sebastianbenz.de/&quot;&gt;coworker&lt;/a&gt; was so kind to organize a fun session at work where we had to write bots
that participated in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Mia_%28game%29&quot;&gt;game&lt;/a&gt;. The basic idea is to
program a bot that plays against other bots, all communicating via UDP with a server that supervises
the game.&lt;br /&gt;
Even though many of our developers are rather avid C++ users, this problem involved two reoccurring
tasks: UDP communication and string handling, both topics that some would claim are not the
particular strong points of C++ (up to the point that it is getting &lt;a href=&quot;http://stackoverflow.com/questions/236129/splitting-a-string-in-c&quot;&gt;ridiculous&lt;/a&gt;)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. So most of us
settled on &lt;a href=&quot;http://ruby-doc.org/core-2.0/String.html&quot;&gt;Ruby&lt;/a&gt; or &lt;a href=&quot;http://docs.python.org/2/library/string.html&quot;&gt;Python&lt;/a&gt;, both of which shine especially with string processing.&lt;br /&gt;
Haskell supposedly also makes it easy to work with datagram sockets but it always takes me some time
to get it right so this time I wanted to take the time to write down a small UDP sample for future
reference. (there is an abundance of TCP examples out there, but less so for UDP)&lt;/p&gt;

&lt;p&gt;Here is a pretty minimal UDP client application in haskell that just connects a datagram socket and
sends some data.&lt;br /&gt;
I retrieve the address-information for the server I want to talk to (&lt;code&gt;getAddrInfo&lt;/code&gt;), get a socket
(&lt;code&gt;socket&lt;/code&gt;) and associate it with the server ip and port (&lt;code&gt;connect&lt;/code&gt;). Now I have a socket that can be
used to send datagram packets.&lt;br /&gt;
For completeness I wrap the code with &lt;code&gt;bracket&lt;/code&gt; just to be sure clean up is done properly in every
case. Don’t mind the &lt;code&gt;withSocketsDo&lt;/code&gt;, this is only necessary on windows for some initialization
stuff but usually is included to make the code platform agnostic.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Network.Socket&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Exception&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withSocketsDo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bracket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sClose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talk&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSocket&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddrInfo&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrFamily&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Datagram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultProtocol&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;talk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Received &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even though in our scenario writing a server was not required, it proved valuable for test purposes
and I include it for reference.&lt;br /&gt;
Here, we build a socket with the address-info and bind it to our own ip on our port (&lt;code&gt;getaddrinfo&lt;/code&gt;,
&lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;bindSocket&lt;/code&gt;). Having bound the socket, we can receive from it and send s.th. back to the
client that sent us a message.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Network.Socket&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Exception&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withSocketsDo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bracket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectMe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sClose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connectMe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddrInfo&lt;/span&gt;
                                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultHints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrFlags&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AI_PASSIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
                                  &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrFamily&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Datagram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultProtocol&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;bindSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serveraddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvFrom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendTo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;terminal&quot;&gt;
$ runghc client
Received Hello, world!
&lt;/pre&gt;

&lt;p&gt;For our bot contest I paired with a ruby guy and a simple UPD client is very easy, even though it
does not include any options to setup the address-info or handle graceful shutdown in case of
exceptions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;socket&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UDPSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello Server&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;terminal&quot;&gt;
$ ruby client.rb
&quot;Hello Server&quot;
&lt;/pre&gt;

&lt;p&gt;Pretty interesting to see that even developers with a strong C/C++ background had problems getting
started. But then again it’s definitely more work to get a working client using the posix api. For
the fun, here is the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;netdb.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define SERVERPORT &amp;quot;3000&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SERVERIP &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUFFER_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addrinfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_UNSPEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_socktype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;getaddrinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVERIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVERPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_socktype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cerr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;client: could not bind socket&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ai_addrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sent &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; bytes to &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVERIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesReceived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesReceived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;received back &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesReceived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; bytes: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freeaddrinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;terminal&quot;&gt;
$ clang++ -Wall client.cpp -o c
$ ./c
sent 11 bytes to 127.0.0.1
received back 11 bytes: Hello World
&lt;/pre&gt;

&lt;p&gt;Besides all the technical details, it is a great way to spend a Friday afternoon and more companies
should consider allowing for such fun events!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Yes, I know about &lt;a href=&quot;http://www.boost.org/doc/libs/1_54_0/doc/html/boost_asio.html&quot;&gt;asio&lt;/a&gt; and &lt;a href=&quot;http://www.boost.org/doc/libs/1_54_0/doc/html/string_algo.html&quot;&gt;boost string algorithms&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Aug 2013 00:00:00 +0200</pubDate>
        <link>http://blog.coldflake.com/posts/Simple-Networking</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/Simple-Networking</guid>
        
        <category>udp</category>
        
        <category>networking</category>
        
        <category>haskell</category>
        
        <category>C++</category>
        
        
      </item>
    
      <item>
        <title>Start of Year with Shunting Yard</title>
        <description>&lt;p&gt;One of my resolutions for the new year is to solve more interesting problems and learn about new
algorithms. The new year puzzle from &lt;a href=&quot;http://programmingpraxis.com/2013/01/01/happy-new-year/&quot;&gt;programming praxis&lt;/a&gt; has some very interesting problem that I
used as an excuse to try out one of Dijkstra’s algorithms: &lt;a href=&quot;http://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot;&gt;Shunting Yard&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As we begin the new year, we note that 109-8*7+654*3-2/1 = 2013. There are three other
combinations of the numbers 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, in order, combined with the five
operators NIL, +, -, * and / that also evaluate to 2013.&lt;/p&gt;

  &lt;p&gt;Your task is to write a program that finds all four expressions that evaluate to 2013.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a couple of little challenges hidden in this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;generating valid combinations of the input numbers&lt;/li&gt;
  &lt;li&gt;evaluating those combinations (with correct precedence)&lt;/li&gt;
  &lt;li&gt;possibly dealing with the complexity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My first approach was to use the fact that you can evaluate strings in lua directly. Here the only
challenge is to generate suitable input strings:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;+&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaeval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;luaeval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loadstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;return &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And seems to work correctly:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;2013_01_01&lt;/span&gt; &amp;gt; time lua combineNumbers.lua 
109-8*7+654*3-2*1	,
109-8*7+654*3-2/1	,
10*98/7*6/5*4*3-2-1	,
10*9*8*7/6/5*4*3-2-1	,

real	0m13.970s
user	0m13.910s
sys	0m0.019s
&lt;/pre&gt;

&lt;p&gt;This approach works if you use language or library that allows you to evaluate a string as an
expression. But… somehow that felt kind of cheating and not very challenging. Building up the
expression and evaluating it seemed a lot more fun.&lt;br /&gt;
There are a couple of approaches you can take for expression evaluation, e.g.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build up a grammar and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;recursive descent parser&lt;/a&gt; from scratch&lt;/li&gt;
  &lt;li&gt;use some sort of parser generator like &lt;a href=&quot;http://www.gnu.org/software/bison/&quot;&gt;bison&lt;/a&gt; or &lt;a href=&quot;http://www.antlr.org/&quot;&gt;antlr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;use the shunting yard algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter was the approach I was not familiar with so I decided to go for that one.&lt;/p&gt;

&lt;h2 id=&quot;shunting-yard&quot;&gt;Shunting Yard&lt;/h2&gt;

&lt;p&gt;The basic idea of this algorithm is to go through the elements of your expression while keeping 2
stacks, one for the operators and the one for the operands. It plugs off tokens from the input and
pushes the operands onto one stack and the operators onto a second. The stack of the operators has
to be ordered by precedence so that the operator on the bottom has the lowest precedence, the one at
the top the highest.&lt;br /&gt;
In order to keep that order, all operators with higher precedence will have to be cleared of the
stack (== applied to operands from the operand stack) until the current operator again has the
highest precedence.&lt;br /&gt;
Consider the example &lt;code&gt;a+b*c+d&lt;/code&gt;:&lt;/p&gt;

&lt;table class=&quot;table-responsive borderless&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;input&lt;/td&gt;
    &lt;td&gt;operands&lt;/td&gt;
    &lt;td&gt;operators&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;a+b*c+d&quot;&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;+b*c+d&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;a&lt;/b&gt;]&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;b*c+d&quot;&lt;/td&gt;
    &lt;td&gt;[a]&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;+&lt;/b&gt;]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;*c+d&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;b&lt;/b&gt;:a]&lt;/td&gt;
    &lt;td&gt;[+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;c+d&quot;&lt;/td&gt;
    &lt;td&gt;[b:a]&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;*&lt;/b&gt;:+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;+d&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;c&lt;/b&gt;:b:a]&lt;/td&gt;
    &lt;td&gt;[*:+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;+d&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;(c*b)&lt;/b&gt;:a]&lt;/td&gt;
    &lt;td&gt;[*:+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;d&quot;&lt;/td&gt;
    &lt;td&gt;[(c*b):a]&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;+&lt;/b&gt;:+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;d&lt;/b&gt;:(c*b):a]&lt;/td&gt;
    &lt;td&gt;[+:+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;d+(c*b)&lt;/b&gt;:a]&lt;/td&gt;
    &lt;td&gt;[+]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&quot;&quot;&lt;/td&gt;
    &lt;td&gt;[&lt;b&gt;d+(c*b)+a&lt;/b&gt;]&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;a-haskell-implementation&quot;&gt;A haskell implementation&lt;/h2&gt;

&lt;p&gt;First we need some datatypes to represent the operators:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Minus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The shunting yard algorithm translates nicely:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;higher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shunting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; just applies an operator to it’s respective 2 operands and the &lt;code&gt;higher&lt;/code&gt; function indicates
the relative precedence:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Minus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Minus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mult&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mult&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Minus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we can evaluate expression, the only thing that remains is to generate all possible
expressions and filter out the valid one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;combinations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;interleave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interleave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combinations&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Turns out for the size of the problem it is quite possible to check all combinations (we have to use
9 operators, for each 5 possibilities, so there are 5^9 ~ 2 mio. combinations). Running the code on
my Macbook Pro 2.3 GHz Core i5 seems fast enough:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;2013_01_01&lt;/span&gt; &amp;gt; time ./combineNumbers

[[Id 10.0,Mult,Id 9.0,Mult,Id 8.0,Mult,Id 7.0,Div,Id 6.0,Div,Id 5.0,Mult,Id 4.0,Mult,Id 3.0,Minus,Id 2.0,Minus,Id 1.0],
[Id 10.0,Mult,Id 9.0,None,Id 8.0,Div,Id 7.0,Mult,Id 6.0,Div,Id 5.0,Mult,Id 4.0,Mult,Id 3.0,Minus,Id 2.0,Minus,Id 1.0],
[Id 10.0,None,Id 9.0,Minus,Id 8.0,Mult,Id 7.0,Plus,Id 6.0,None,Id 5.0,None,Id 4.0,Mult,Id 3.0,Minus,Id 2.0,Div,Id 1.0],
[Id 10.0,None,Id 9.0,Minus,Id 8.0,Mult,Id 7.0,Plus,Id 6.0,None,Id 5.0,None,Id 4.0,Mult,Id 3.0,Minus,Id 2.0,Mult,Id 1.0]]

real	0m1.928s
user	0m1.798s
sys	0m0.055s
&lt;/pre&gt;

&lt;p&gt;Full source code as usual available as a &lt;a href=&quot;https://gist.github.com/4493943&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 09 Jan 2013 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/happy-new-year-with-shunting-yard</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/happy-new-year-with-shunting-yard</guid>
        
        <category>haskell</category>
        
        <category>puzzle</category>
        
        <category>algorithm</category>
        
        <category>lua</category>
        
        
      </item>
    
      <item>
        <title>Top 10 Unix Command Line Utilities 2012</title>
        <description>&lt;div class=&quot;table-of-contents&quot;&gt;


&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#tr&quot;&gt;tr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sort&quot;&gt;sort&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uniq&quot;&gt;uniq&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#split-and-cat&quot;&gt;split and cat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#substitution-operations&quot;&gt;substitution operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#calculate-the-size-of-all-files-found-by-find&quot;&gt;calculate size of files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#df&quot;&gt;df&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dd&quot;&gt;dd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zip&quot;&gt;zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hexdump&quot;&gt;hexdump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;This year has been quite busy with lot’s of great but stressful changes in my professional and
personal life. That’s why I did not find a lot of time to write new blog posts. Now that the year is
turning to an end I at least want to summarize some of the unix commands I found helpful over the
year.&lt;br /&gt;
As &lt;a href=&quot;/posts/bash-features-of-the-year&quot;&gt;last year&lt;/a&gt; I’m going to list 10 unix commands out of a larger collection of little examples I
jotted down. The list has no particular order, just the way they came in handy for me.&lt;/p&gt;

&lt;h2 id=&quot;tr&quot;&gt;1&amp;gt; tr&lt;/h2&gt;

&lt;p&gt;Whenever you need to do some small text substitutions &lt;code&gt;tr&lt;/code&gt; can come in handy (tr stands for
&lt;em&gt;translate&lt;/em&gt; or &lt;em&gt;transliterate&lt;/em&gt;). It will take some input, apply a transformation and spit out the
result.&lt;br /&gt;
&lt;code&gt;tr&lt;/code&gt; takes 2 parameters, the first one is a set of characters that it should translate, the second
the set of characters that will act as a replacement. So the arguments &lt;strong&gt;“abc”&lt;/strong&gt; &lt;strong&gt;“123”&lt;/strong&gt; would
mean that &lt;strong&gt;a&lt;/strong&gt; gets replaced by &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt; with &lt;strong&gt;2&lt;/strong&gt; and so on.&lt;/p&gt;

&lt;p&gt;As a simple example, this line changes the case of the characters ‘a’ through ‘z’:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; echo &amp;quot;Hello&amp;quot; | tr &amp;quot;A-Za-z&amp;quot; &amp;quot;a-zA-Z&amp;quot;
hELLO
&lt;/pre&gt;

&lt;p&gt;More realistic example: split your $PATH into it’s elements:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; echo $PATH | tr &amp;quot;:&amp;quot; &amp;quot;\n&amp;quot; | sort

    /Users/oliver/.cabal/bin
    /Users/oliver/.rvm/bin
    /Users/oliver/.rvm/gems/ruby-1.9.3-p0/bin
    /Users/oliver/.rvm/gems/ruby-1.9.3-p0@global/bin
    /Users/oliver/.rvm/rubies/ruby-1.9.3-p0/bin
    /Users/oliver/local/node/bin
    /Volumes/macbox_cs/dev/android-sdk-macosx/platform-tools/
    ...
&lt;/pre&gt;

&lt;h2 id=&quot;sort&quot;&gt;2&amp;gt; sort&lt;/h2&gt;

&lt;p&gt;Simple command to sort input in different manners. By default this in alphabetic order, but using
the &lt;code&gt;-n&lt;/code&gt; option will sort in a numeric fashion:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; du /bin/* | sort -n -r | head -4
1320	/bin/ksh
1264	/bin/sh
1264	/bin/bash
592	/bin/zsh
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; will take multiple files as input and will merge and sort all of the files for you. Some of
the most used options include &lt;code&gt;-r&lt;/code&gt; for sorting in reverse order and &lt;code&gt;-f&lt;/code&gt; for sorting
case-insensitive.&lt;/p&gt;

&lt;h2 id=&quot;uniq&quot;&gt;3&amp;gt; uniq&lt;/h2&gt;

&lt;p&gt;Want to get rid of duplicate lines? &lt;code&gt;uniq&lt;/code&gt; solves this problem efficiently. Note that it will only
compare adjacent lines for equality, so you might want to sort before you use &lt;code&gt;uniq&lt;/code&gt;.&lt;br /&gt;
Nice options: &lt;code&gt;-c&lt;/code&gt; will prepend the count of equal elements before a line, &lt;code&gt;-u&lt;/code&gt; will only output
lines that are &lt;em&gt;not&lt;/em&gt; repeated and &lt;code&gt;-i&lt;/code&gt; does the whole thing case-insensitive.&lt;/p&gt;

&lt;p&gt;Here is an example that combines &lt;strong&gt;tr&lt;/strong&gt;, &lt;strong&gt;sort&lt;/strong&gt; and &lt;strong&gt;uniq&lt;/strong&gt; such that you can get the frequency
of all words in a wikipedia article:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; curl http://en.wikipedia.org/wiki/Minimum_spanning_tree \
      | tr -cs &amp;quot;A-Za-z&amp;quot; &amp;quot;\n&amp;quot; | tr &amp;quot;A-Z&amp;quot; &amp;quot;a-z&amp;quot; \
      | sort | uniq -c | sort -n -r

% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 93342  100 93342    0     0   279k      0 --:--:-- --:--:-- --:--:--  323k
1031 a
 568 span
 442 href
 435 class
 308 li
 300 b
 284 title
 229 wiki
 211 the
 209 cite
 206 id
 192 spanning
 184 i
 169 tree
 166 minimum
 ...
&lt;/pre&gt;

&lt;p&gt;This fetches an html-page from wikipedia and first does some preprocessing using &lt;code&gt;tr&lt;/code&gt;:&lt;br /&gt;
&lt;code&gt;tr -cs &quot;A-Za-z&quot; &quot;\n&quot;&lt;/code&gt; — split on all non-alphabetic characters&lt;br /&gt;
&lt;code&gt;tr &quot;A-Z&quot; &quot;a-z&quot;&lt;/code&gt; — make everything lowercase&lt;br /&gt;
&lt;code&gt;sort | uniq -c&lt;/code&gt; — sort, remove dups but remember the &lt;strong&gt;c&lt;/strong&gt;ount&lt;br /&gt;
&lt;code&gt;sort -n -r&lt;/code&gt; — sort &lt;strong&gt;n&lt;/strong&gt;umerically in &lt;strong&gt;r&lt;/strong&gt;everse order&lt;/p&gt;

&lt;h2 id=&quot;split-and-cat&quot;&gt;4&amp;gt; split and cat&lt;/h2&gt;

&lt;p&gt;Again a very simple command but can be surprisingly helpful.&lt;br /&gt;
This is an example that splits a huge file into 75 MB chunks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;split -b 75m input.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will result in a bunch of files that are named with 3 letters starting from &lt;code&gt;xaa&lt;/code&gt;,&lt;code&gt;xab&lt;/code&gt;,…&lt;br /&gt;
To reassemble the lot, all those files have to be con&lt;strong&gt;cat&lt;/strong&gt;inated in alphabetic order:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ls x*&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &amp;gt; reassembled.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just a quick check to make sure we ended up with the same content:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; ls *.zip | xargs md5
MD5 (input.zip) = d760b448595f844b1162eaa3c04f83d8
MD5 (reassembled.zip) = d760b448595f844b1162eaa3c04f83d8
&lt;/pre&gt;

&lt;h2 id=&quot;substitution-operations&quot;&gt;5&amp;gt; substitution operations&lt;/h2&gt;

&lt;p&gt;Operations on multiple files are very frequent. Some situation I found myself in several times was
that I needed to extract audio from a bunch of mp4 files.&lt;br /&gt;
I &lt;a href=&quot;http://www.debian-administration.org/articles/150&quot;&gt;found&lt;/a&gt; 2 good ways to solve this: my prefered one makes use of &lt;em&gt;substitution operations&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in *.mp4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; ffmpeg -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${i%.mp4}.mp3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the subtitution operator &lt;code&gt;${i%.mp4}&lt;/code&gt; deletes the shortest possible match from the right side.&lt;br /&gt;
This is nice and terse…but there is another variant that might even be a little more explicit: using &lt;em&gt;basename&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in *.mp4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; ffmpeg -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;`basename $i .mp4`.mp3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;calculate-the-size-of-all-files-found-by-find&quot;&gt;6&amp;gt; calculate the size of all files found by find&lt;/h2&gt;

&lt;p&gt;There are for sure hundreds of ways to achieve this…I liked the combination of a simple &lt;code&gt;find&lt;/code&gt;
with a short and sweet &lt;code&gt;awk&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; find . -iname &amp;quot;*.png&amp;quot; -ls | awk &amp;#39;{s += $7} END {print s}&amp;#39;
2076723
&lt;/pre&gt;

&lt;p&gt;As some people on &lt;a href=&quot;http://news.ycombinator.com/item?id=4985393&quot;&gt;hn&lt;/a&gt; pointed out &lt;em&gt;awk&lt;/em&gt; is probably not the simplest solution for summing up space
usage. So I include an example inspired from &lt;a href=&quot;http://mrnugget.github.com/blog/2012/10/24/command-line-ride/&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; find . -iname &amp;quot;*.png&amp;quot; -print0 | xargs -0 du -ch | tail -1
2.2M	total
&lt;/pre&gt;

&lt;h2 id=&quot;df&quot;&gt;7&amp;gt; df&lt;/h2&gt;

&lt;p&gt;Classic. Collects some disk space usage information about your system.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; df -h
Filesystem     Size   Used  Avail Capacity  iused   ifree %iused  Mounted on
/dev/disk0s2  156Gi  138Gi   17Gi    89% 36247400 4528347   89%   /
...
&lt;/pre&gt;

&lt;h2 id=&quot;dd&quot;&gt;8&amp;gt; dd&lt;/h2&gt;

&lt;p&gt;Basically &lt;code&gt;dd&lt;/code&gt; is just a form of copying from some input to some output (by default from stdin to
stdout) that let’s you configure the block size used for the copy. It will duplicate a bitstream
from it’s input. I’ve also heard  people call it &lt;strong&gt;d&lt;/strong&gt;ata &lt;strong&gt;d&lt;/strong&gt;estroyer ‘cause you can easily shoot
yourself in the foot by inadvertently mixing up input and output…&lt;br /&gt;
Turns out there are quite some interesting usecases for it.&lt;/p&gt;

&lt;p&gt;A nice one I found &lt;a href=&quot;http://www.marksanborn.net/howto/wiping-a-hard-drive-with-dd/&quot;&gt;here&lt;/a&gt; is to securely wipe your drive: overwrite the entire drive with 0s:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/hda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More secure (means harder to recover) is to use random data to wipe the drive:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/urandom &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/hda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And for the paranoid and the US Government we can repeatedly execute the fun:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; n in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/urandom &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sda &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8b &lt;span class=&quot;nv&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;notrunc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;safe-mbr&quot;&gt;Safe MBR&lt;/h3&gt;

&lt;p&gt;A less destructive example shows how to create an image of the entire master boot record (including the partition table):&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; dd if=/dev/sda of=MBR.img bs=512 count=1
&lt;/pre&gt;

&lt;p&gt;Here &lt;em&gt;count=1&lt;/em&gt; means copy only 1 input block, &lt;em&gt;bs=512&lt;/em&gt; sets both input and output block size to 512 bytes.&lt;/p&gt;

&lt;h3 id=&quot;generate-randomness&quot;&gt;Generate Randomness&lt;/h3&gt;

&lt;p&gt;Sometimes very handy is to use &lt;code&gt;dd&lt;/code&gt; to generate some random data for a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;random.bin &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;tracking-progress&quot;&gt;Tracking Progress&lt;/h3&gt;

&lt;p&gt;In some instances the process started with dd will take a considerable amount of time. Since you
will not get any fancy progress bars, there is some trick to find out about the progress.&lt;br /&gt;
First you need to find out about the process id of the dd process:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; pgrep -l &amp;#39;^dd$&amp;#39;
4523 dd
&lt;/pre&gt;

&lt;p&gt;Then send the USR1 signal to the dd process:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; kill -USR1 4523
&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;dd&lt;/code&gt; detects the USR1 signal, it will print out the current statistics to its stderr.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; 123122312 bytes (xxx GB) copied, 3965.94 s, 13.9 MB/s
&lt;/pre&gt;

&lt;p&gt;After reporting the status, dd will resume copying. To keep it going use
&lt;a href=&quot;/posts/2011-12-31-bash-features-of-the-year.html&quot;&gt;watch&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; watch -n 10 kill -USR1 4523
&lt;/pre&gt;

&lt;h2 id=&quot;zip&quot;&gt;9&amp;gt; zip&lt;/h2&gt;

&lt;p&gt;Even though I prefer tar with either gzip or bzip2, the &lt;em&gt;zip&lt;/em&gt; format is widely used especially among
windows users. So I frequently use &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt; as well. Since it works quite differently
compared to tar, I list the main usecases I need:&lt;/p&gt;

&lt;p&gt;Most simple case: add some files to a zip-file (called “abc.zip”):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;zip abc file1 file2 file3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course you can also copy a whole directory “tmp” into “abc.zip”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;zip -r abc tmp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also quite handy: creating a password protected archives:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;zip -e important.zip file1 file2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally list the files inside an archive&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;unzip -l a.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;hexdump&quot;&gt;10&amp;gt; hexdump&lt;/h2&gt;

&lt;p&gt;When dealing with binary files it is often necessary to glimps a quick view to the actual data. I
found that having a little command line utility can be very practical for such cases. &lt;code&gt;hexdump&lt;/code&gt; has
exactly what I need.&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; hexdump  new.zip | head -5
0000000 70 a9 20 8d b1 a3 5c 1c 16 e3 17 b2 ef 94 16 ac
0000010 85 40 59 f9 89 40 45 ed 61 e8 10 f5 6f f5 99 a2
0000020 3a d6 69 62 e0 ab ee 0a 67 b8 c5 21 58 42 4d 52
0000030 2d 78 ae 2a 31 f2 78 c7 1f 22 99 07 e1 6a 55 bb
0000040 68 9a fe 8f c3 e0 e5 a3 4c 7d b3 6b f9 ae de 92
&lt;/pre&gt;

&lt;p&gt;You can instruct it to display also the corresponding ASCII representation:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; hexdump -C new.zip | head -5
00000000  70 a9 20 8d b1 a3 5c 1c  16 e3 17 b2 ef 94 16 ac  |p. ...\.........|
00000010  85 40 59 f9 89 40 45 ed  61 e8 10 f5 6f f5 99 a2  |.@Y..@E.a...o...|
00000020  3a d6 69 62 e0 ab ee 0a  67 b8 c5 21 58 42 4d 52  |:.ib....g..!XBMR|
00000030  2d 78 ae 2a 31 f2 78 c7  1f 22 99 07 e1 6a 55 bb  |-x.*1.x..&amp;quot;...jU.|
00000040  68 9a fe 8f c3 e0 e5 a3  4c 7d b3 6b f9 ae de 92  |h.......L}.k....|
&lt;/pre&gt;

&lt;p&gt;Combining hex and octal output quickly allows for relating the hex values to their octal counterparts:&lt;/p&gt;

&lt;pre class=&quot;terminal&quot;&gt;
&lt;span class=&quot;prompt&quot;&gt;tmp&lt;/span&gt; &amp;gt; hexdump -xb new.zip | head -5
0000000    a970    8d20    a3b1    1c5c    e316    b217    94ef    ac16
0000000 160 251 040 215 261 243 134 034 026 343 027 262 357 224 026 254
0000010    4085    f959    4089    ed45    e861    f510    f56f    a299
0000010 205 100 131 371 211 100 105 355 141 350 020 365 157 365 231 242
0000020    d63a    6269    abe0    0aee    b867    21c5    4258    524d
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;short update:&lt;/em&gt; somebody took the time to &lt;a href=&quot;http://science.webhostinggeeks.com/unix-komandne-usluzne-linije&quot;&gt;translate this article&lt;/a&gt; into Serbo-Croatian&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Dec 2012 13:00:00 +0100</pubDate>
        <link>http://blog.coldflake.com/posts/Top-10-Unix-Command-Line-Utilities-2012</link>
        <guid isPermaLink="true">http://blog.coldflake.com/posts/Top-10-Unix-Command-Line-Utilities-2012</guid>
        
        <category>unix</category>
        
        <category>bash</category>
        
        
      </item>
    
  </channel>
</rss>
